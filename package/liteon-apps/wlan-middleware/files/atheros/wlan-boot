#!/bin/sh
##################################
# Functions
##################################
get_ownip()
{
    #wanip="$(/sbin/ifconfig eth0 | grep "inet addr" | sed -ne 's/^ *inet addr:\([[:digit:]\.]*\) .*$/\1/p')"
    # EZP: XXX: This needs to be fixed. 
    #wanip="$(nvram get wan0_ipaddr)"
    lanip="$(nvram get lan0_ipaddr)"

    # Use wanip if available
    #if [ -n "$wanip" ];then
    #echo $wanip
    if [ -n "$lanip" ];then
    echo "$lanip"
    else
    echo 192.168.1.1
    fi
}

get_rule_value()
{
    local rule_name=$1
    local rule_index=$2
    local rule_entry=$3
    rule_content="$(nvram show $rule_name $rule_index $rule_entry | sed -e 's/\\/\\\\/g;s/"/\\\"/g;s/`/\\\`/g;')"
    #echo $rule_content | sed -e "s/'/\\\'/g"
    echo "$rule_content" 
}

# Give a default value to each RT2860AP variable
get_convert_authmode()
{
    local authmode="OPEN"
    local secmode=$1
    local wepencmode=$2
    local wpacompatible=$3
 
    if [ $secmode = "wpa" ]; then
        authmode="WPA"
    elif [ $secmode = "wpa2" ]; then
        authmode="WPA2"
    elif [ $secmode = "wpa2mixed" ]; then
        authmode="WPA1WPA2"
    elif [ $secmode = "psk" ]; then
        authmode="WPAPSK"
    elif [ $secmode = "psk2" ]; then
        authmode="WPA2PSK"
    elif [ $secmode = "psk2mixed" ]; then
        authmode="WPAPSKWPA2PSK"
    elif [ $secmode = "wep" ]; then
        authmode="WEP"
    else
        authmode="OPEN"
    fi

    echo $authmode
}

get_wep_key_type()
{
    local wep_key="$1"
    local key_type=0
    local wep_key_type="$2"
    [ -n "$(echo $wep_key | sed -n '/\$/p')" ] && {
        eval "wep_key=$1"
    }
    if [ "${wep_key_type}" = "hex" -o "${wep_key_type}" = "0" ]; then
        echo "0"
    elif [ "${wep_key_type}" = "ascii" -o "${wep_key_type}" = "1" ]; then
        echo "1"
    else
        if [ ${#wep_key} -eq 5 ]; then
            key_type=1
        elif [ ${#wep_key} -eq 13 ]; then
            key_type=1
        fi
        echo $key_type
    fi
}
        

get_convert_crypto()
{
    local crypto="NONE"
    local secmode=$1
    local crypto=$2
    
    if [ $secmode = "disabled" ]; then
        crypto="NONE"
    elif [ $secmode = "wep" ]; then
        crypto="WEP"
    else
        if [ $crypto = "tkip" ]; then
            crypto="TKIP"
        elif [ $crypto = "aes" ]; then
            crypto="CCMP"
        elif [ $crypto = "mixed" ]; then
            crypto="TKIP CCMP"
        fi
    fi
    echo $crypto
}
                                                                                                            
get_convert_proto()
{
    local secmode=$1
    local proto="WPA"
    
    if [ $secmode = "wpa" ]; then
        proto="WPA"
    else
        proto="RSN"
    fi
    echo $proto
}

get_convert_eap()
{
    local auth=$1
    local eap="PEAP"
    
    if [ $auth = "1" ]; then
        eap="PEAP"
    else
        eap="TTLS"
    fi
    echo $eap
}

get_convert_encmode()
{
    local encmode_str=$1
    local encmode="1"
   
    if [ "$encmode_str" = "open" ]; then
        encmode="1"
    elif [ "$encmode_str" = "shared" ]; then
        encmode="2"
    fi
    echo $encmode
}

get_convert_mixed_cipher_mode()
{
    local secmode=$1
    local crypto=$2
    local wpacap=$3
    [ "$secmode" = "wpa2" -o "$secmode" = "psk2" -o "$secmode" = "wpa2mixed" -o "$secmode" = "psk2mixed" ] && {
        [ "$crypto" = "mixed" -a "$wpacap" = "1" ] && {
            echo "WPA_TKIP_WPA2_AES"
        }
    }
    echo ""
}

get_rekey_interval()
{
    local rekey_method=$1
    local rekey_time=$2
    local rekey_pkt=$3
    if [ "$rekey_method" = "time" ]; then
        echo $rekey_time
    else
        echo $rekey_pkt
    fi
}

get_acl_policy()
{
    local idx=$1
    local vidx=$2
    if [ -z "$(nvram show wl${idx}${vidx}_acl_basic_rule 0 enable)" -o \
            "$(nvram show wl${idx}${vidx}_acl_basic_rule 0 enable)" = "0" -o \
            "$(nvram show wl${idx}${vidx}_acl_basic_rule 0 enable)" = "disabled" ]; then
        # Disabled
        echo "0"
        return 0
    else
        if [ "$(nvram show wl${idx}${vidx}_acl_basic_rule 0 defpolicy)" = "allow" -o \
             "$(nvram show wl${idx}${vidx}_acl_basic_rule 0 defpolicy)" = "1" ]; then
            #allow all
            echo "1"
            return 1
        elif [ "$(nvram show wl${idx}${vidx}_acl_basic_rule 0 defpolicy)" = "deny" -o \
               "$(nvram show wl${idx}${vidx}_acl_basic_rule 0 defpolicy)" = "2" ]; then
            #deny all
            echo "2"
            return 2
        else
            # Disabled
            echo "0"
            return 0
        fi
    fi
}

get_wlan_mode()
{
    local idx=$1
    if [ ${idx} = "0" ]; then
        if [ "$(nvram show wl_mode_rule 0 mode)" = "ap" -o "$(nvram show wl_mode_rule 0 mode)" = "normal" ]; then
            echo "0"
        elif [ "$(nvram show wl_mode_rule 0 mode)" = "client" -o "$(nvram show wl_mode_rule 0 mode)" = "wisp" ]; then
            echo "1"
        else
            echo "0"
        fi
    elif [ ${idx} = "1" ]; then
        if [ "$(nvram show wl1_mode_rule 0 mode)" = "ap" -o "$(nvram show wl1_mode_rule 0 mode)" = "normal" ]; then
            echo "0"
        elif [ "$(nvram show wl1_mode_rule 0 mode)" = "client" -o "$(nvram show wl1_mode_rule 0 mode)" = "wisp" ]; then
            echo "1"
        else
            echo "0"
        fi
    fi
}

get_acl_list()
{
    local idx=$1
    local vidx=$2
    #local defpol="$(nvram show wl${idx}${vidx}_acl_basic_rule 0 defpolicy)"
    local aclnum="$(nvram get wl${idx}${vidx}_acl_num)"
    local aclidx="0"
    local acllist=""
    while [ "$aclidx" -lt "$aclnum" ];
    do
        [ "$(nvram show wl${idx}${vidx}_acl_basic_rule 0 enable)" = "1" -a -n "$(nvram show wl${idx}${vidx}_acl_rule $aclidx mac)" ] && {
            [ "$(nvram show wl${idx}${vidx}_acl_rule $aclidx flag)" = "1" -o "$(nvram show wl${idx}${vidx}_acl_rule $aclidx flag)" = "0" ] && {
                if [ -n "${acllist}" ]; then
                    acllist="${acllist};$(nvram show wl${idx}${vidx}_acl_rule $aclidx mac)"
                else
                    acllist="$(nvram show wl${idx}${vidx}_acl_rule $aclidx mac)"
                fi
          }
        }
        aclidx=$(($aclidx + 1))
    done
    acllist="${acllist};"
    echo "${acllist}"
}
if [ "$(nvram show wl_mode_rule 0 mode)" = "ap" -o "$(nvram show wl_mode_rule 0 mode)" = "normal" ]; then
    wl_rule_name="wl_ap_basic_rule wl_ap_advanced_rule wl_wds_rule"
else
    wl_rule_name="wl_basic_rule wl_wds_rule"
fi

if [ "$(nvram show wl1_mode_rule 0 mode)" = "ap" -o "$(nvram show wlv_mode_rule 0 mode)" = "normal" ]; then
    wl5g_rule_name="wl5g_ap_basic_rule wl1_ap_advanced_rule"
else
    wl5g_rule_name="wl5g_basic_rule"
fi

wl_basic_rule_item="enable txpower"
wl5g_basic_rule_item="enable txpower"
#wl_advanced_rule_item="frag rts dtim bcn plcphdr antdiv txburst pktaggr \
#                       txmode rdg linkadapt htc htbw gi opmode mcs \
#                       mpdu amsdu autoba bawinsize badecline extcha wdstxmode"
wl_ap_basic_rule_item="enable txpower"
wl5g_ap_basic_rule_item="enable txpower"
#wl_ap_advanced_rule_item="frag rts dtim bcn plcphdr antdiv txburst pktaggr \
#                       txmode rdg linkadapt htc htbw gi opmode mcs \
#                       mpdu amsdu autoba bawinsize badecline extcha wdstxmode"
#wl1_ap_advanced_rule_item="frag rts dtim bcn plcphdr antdiv txburst pktaggr \
#                       txmode rdg linkadapt htc htbw gi opmode mcs \
#                       mpdu amsdu autoba bawinsize badecline extcha wdstxmode"
#wl_wds_rule_item="mode timeout"
#wl_wps_rule_item="mode pin configured"
#wl_wps_sta_rule_item="mode pin reg_ssid reg_auth reg_enc reg_keyindex reg_key"

wlv_rule_name="wlv_basic_rule wlv_ssid_rule \
               wlv_sec_rule wlv_sec_wep_rule \
               wlv_sec_wpa_rule wlv_sec_wpa2_rule"
wlv_basic_rule_item="enable"
wlv_ssid_rule_item="ssid"
wlv_sec_rule_item="secmode"
wlv_sec_wpa2_rule_item="key crypto radius_key radius_ipaddr radius_port \
                        rekey_mode rekey_time_interval rekey_pkt_interval preauth \
                        pmkperiod wpacap"

wlv_apcli_sec_wep_rule_item="key_index key1 key2 key3 key4 keytype encmode"
wlv_apcli_sec_wpa_rule_item="key crypto"
wlv_apcli_sec_wpa2_rule_item="key crypto"
wlv_apcli_rule_item="enable ssid bssid secmode"
#Added by Mario Huang for Station 802.1X
wlv_wpa_auth_rule_item="wpa_crypto wpa_auth wpa_user wpa_passwd"

set_wl_var()
{
     export WIFI0_RADIO_ENABLE="${wifi0_wl_enable}"
     if [ $wifi0_wl_txpower = "0" ]; then
         export TXPOWER=0
     elif [ $wifi0_wl_txpower = "2" ]; then
         export TXPOWER=2
     elif [ $wifi0_wl_txpower = "4" ]; then
         export TXPOWER=4
     elif [ $wifi0_wl_txpower = "6" ]; then
         export TXPOWER=6
     elif [ $wifi0_wl_txpower = "8" ]; then
         export TXPOWER=8
     elif [ $wifi0_wl_txpower = "10" ]; then
         export TXPOWER=10
     elif [ $wifi0_wl_txpower = "12" ]; then
         export TXPOWER=12
     elif [ $wifi0_wl_txpower = "14" ]; then
         export TXPOWER=14
     elif [ $wifi0_wl_txpower = "16" ]; then
         export TXPOWER=16
     elif [ $wifi0_wl_txpower = "18" ]; then
         export TXPOWER=18
     elif [ $wifi0_wl_txpower = "20" ]; then
         export TXPOWER=20
     else
         export TXPOWER=0
     fi
     echo "WLAN_BOOT_PRINT: TXPOWER is ${TXPOWER}"
     wifi0_HT_OpMode=$(get_wlan_mode 0)
     #wifi0_HT_OpMode=$wifi0_wl_opmode
     echo "WLAN_BOOT_PRINT: wifi0_HT_OpMode is ${wifi0_HT_OpMode}"
}

set_wl_var_5g()
{
     export WIFI1_RADIO_ENABLE="${wifi1_wl_enable}"
     if [ $wifi1_wl_txpower = "0" ]; then
         export TXPOWER_2=0
     elif [ $wifi1_wl_txpower = "2" ]; then
         export TXPOWER_2=2
     elif [ $wifi1_wl_txpower = "4" ]; then
         export TXPOWER_2=4
     elif [ $wifi1_wl_txpower = "6" ]; then
         export TXPOWER_2=6
     elif [ $wifi1_wl_txpower = "8" ]; then
         export TXPOWER_2=8
     elif [ $wifi1_wl_txpower = "10" ]; then
         export TXPOWER_2=10
     elif [ $wifi1_wl_txpower = "12" ]; then
         export TXPOWER_2=12
     elif [ $wifi1_wl_txpower = "14" ]; then
         export TXPOWER_2=14
     elif [ $wifi1_wl_txpower = "16" ]; then
         export TXPOWER_2=16
     elif [ $wifi1_wl_txpower = "18" ]; then
         export TXPOWER_2=18
     elif [ $wifi1_wl_txpower = "20" ]; then
         export TXPOWER_2=20
     else
         export TXPOWER_2=0
     fi
     echo "WLAN_BOOT_PRINT: TXPOWER_2 is ${TXPOWER_2}"
     #wifi1_HT_OpMode=$wifi1_wl_opmode
     wifi1_HT_OpMode=$(get_wlan_mode 1)
     echo "WLAN_BOOT_PRINT: wifi1_HT_OpMode is ${wifi1_HT_OpMode}"
}


gethide_status()
{
    local wlvidx=$1
    # We hide the ssid when ssid is hiddne, ssid is disabled or wifi is off
    [ "$(nvram show wl_basic_rule 0 enable)" = "0" -o \
        "$(nvram show wl_ap_basic_rule 0 enable)" = "0" -o \
      "$(nvram show wl0_basic_rule $wlvidx enable)" = "0" -o \
      "$(nvram show wl0_basic_rule $wlvidx hidden)" = "1" ] && {
        echo "1"
    } || {
        echo "0"
    }
}

atheros_get_wl_rule_var()
{
local wl_num=$(get_rule_value "wl_rule_num" "0" "")

local index_if=0
local index_vif=0
local index_ssid=1
local index_rule=0
local index_item=0
local index_wds=0
local index_wdsid=0
local index_apcli=0
local index_apcliid=0

local wlv_num=0
local wifi0_auth_str=""
local wifi0_crypto_str=""
local wifi0_mixedcipher_str=""
local wifi1_auth_str=""
local wifi1_crypto_str=""
local wifi1_mixedcipher_str=""

local key1_type_str=""
local key2_type_str=""
local key3_type_str=""
local key4_type_str=""
local key_index_str=""
local wifi0_hide_ssid_str=""
local wifi0_wme_str=""
local wifi0_noforwarding_str=""
local wifi1_hide_ssid_str=""
local wifi1_wme_str=""
local wifi1_noforwarding_str=""

local wds_hwaddr_str=""
local wds_crypto_str=""
local wds_key_str=""

local wifi0_RADIUS_Server_str=""
local wifi0_RADIUS_Port_str=""
local wifi0_RekeyMethod_str=""
local wifi0_RekeyInterval_str=""
local wifi1_RADIUS_Server_str=""
local wifi1_RADIUS_Port_str=""
local wifi1_RekeyMethod_str=""
local wifi1_RekeyInterval_str=""
#local prewifi0_auth_str=""
local sepchar=""

while [ $index_if -le $wl_num ]
do
    if [ "$index_if" = "0" ]; then
        # evalute physical interface parameters
        for rule in $wl_rule_name; do {
            eval "rule_item=\$${rule}_item"
            for item in $rule_item; do {
                eval "wifi${index_if}_wl_${item}=$(get_rule_value ${rule} ${index_if} ${item})"
            } done
        } done
    elif [ "$index_if" = "1" ]; then
        # evalute physical interface parameters
        for rule in $wl5g_rule_name; do {
            eval "rule_item=\$${rule}_item"
            for item in $rule_item; do {
                #eval "wifi${index_if}_wl_${item}=$(get_rule_value ${rule} ${index_if} ${item})"
                eval "wifi${index_if}_wl_${item}=$(get_rule_value ${rule} 0 ${item})"
            } done
        } done
    fi

    # evalute virtual interface parameters

    index_vif=0
    wlv_num=0
    wlv_num=$(get_rule_value "wlv_rule_num" "0" "")
    while [ $index_vif -lt $wlv_num ]
    do
        rule="wl${index_if}_basic_rule"
        for item in $wlv_basic_rule_item; do {
            #eval "wifi${index_if}_${item}$((${index_vif} + 1))=$(get_rule_value ${rule} ${index_vif} ${item})"
            eval "wifi${index_if}_${item}=$(get_rule_value ${rule} ${index_vif} ${item})"
        } done

        rule="wl${index_if}_ssid_rule"
        for item in $wlv_ssid_rule_item; do {
            #eval "wifi${index_if}_${item}$((${index_vif} + 1))=\"$(get_rule_value ${rule} ${index_vif} ${item})\""
            eval "wifi${index_if}_${item}=\"$(get_rule_value ${rule} ${index_vif} ${item})\""
        } done

    # Check wireless security mode 
        rule="wl${index_if}_sec_rule"
        for item in $wlv_sec_rule_item; do {
            #eval "wifi${index_if}_${item}$((${index_vif} + 1))=$(get_rule_value ${rule} ${index_vif} ${item})"
            eval "wifi${index_if}_${item}=$(get_rule_value ${rule} ${index_vif} ${item})"
        } done
    # If any security mode of ssid use radius, set wifi0_own_ip_addr
        if [ "$index_if" = "0" ]; then
            [ "$wifi0_secmode" = "wpa" -o "$wifi0_secmode" = "wpa2" -o "$wifi0_secmode" = "wpa2mixed" ] && {
                export AP_OWNIP="$(get_ownip)"
                echo "WLAN_BOOT_PRINT: AP_OWNIP is ${AP_OWNIP}"
            }
        elif [ "$index_if" = "1" ]; then
            [ "$wifi1_secmode" = "wpa" -o "$wifi1_secmode" = "wpa2" -o "$wifi1_secmode" = "wpa2mixed" ] && {
                export AP_OWNIP="$(get_ownip)"
                echo "WLAN_BOOT_PRINT: AP_OWNIP is ${AP_OWNIP}"
            }
        fi


        if [ "$index_if" = "0" ]; then
            case $wifi0_secmode in 
                wpa2|wpa2mixed|psk2|psk2mixed)
                rule="wl${index_if}_sec_wpa2_rule"
                for item in $wlv_sec_wpa2_rule_item; do {
                    eval "wifi0_${item}=\"$(get_rule_value ${rule} ${index_vif} ${item})\""
                } done
            esac
        elif [ "$index_if" = "1" ]; then
            case $wifi1_secmode in 
                wpa2|wpa2mixed|psk2|psk2mixed)
                rule="wl${index_if}_sec_wpa2_rule"
                for item in $wlv_sec_wpa2_rule_item; do {
                    eval "wifi1_${item}=\"$(get_rule_value ${rule} ${index_vif} ${item})\""
                } done
            esac
        fi

        #the setting items are available only when ssid is enabled
        # =======================================================
        # For multiple SSID settings, the setting entries are combined
        # with ";" so we process it separately.
        [ "$index_vif" -gt "0" ] && sepchar=";"

        if [ "$index_if" = "0" ]; then

            if [ "${index_vif}" = "0" ]; then
            export AP_SECMODE="$(get_convert_authmode $wifi0_secmode $wifi0_encmode $wifi0_wpacap)"
            echo "WLAN_BOOT_PRINT: AP_SECMODE is ${AP_SECMODE}"
            else
            export AP_SECMODE_$((${index_vif} * 2 + 1))="$(get_convert_authmode $wifi0_secmode $wifi0_encmode $wifi0_wpacap)"
            echo "WLAN_BOOT_PRINT: AP_SECMODE_$((${index_vif} * 2 + 1)) is \"$(get_convert_authmode $wifi0_secmode $wifi0_encmode $wifi0_wpacap)\""
            fi

            if [ "${index_vif}" = "0" ]; then
            export AP_ENCRYPTYPE="$(get_convert_crypto $wifi0_secmode $wifi0_crypto)"
            echo "WLAN_BOOT_PRINT: AP_ENCRYPTYPE is ${AP_ENCRYPTYPE}"
            else
            export AP_ENCRYPTYPE_$((${index_vif} * 2 + 1))="$(get_convert_crypto $wifi0_secmode $wifi0_crypto)"
            echo "WLAN_BOOT_PRINT: AP_ENCRYPTYPE_$((${index_vif} * 2 + 1)) is \"$(get_convert_crypto $wifi0_secmode $wifi0_crypto)\""
            fi

            eval "wifi0_WpaMixPairCipher$((${index_vif} + 1))=\"$(get_convert_mixed_cipher_mode $wifi0_secmode $wifi0_crypto $wifi0_wpacap)\""
            current_wpamixpaircipher="wifi0_WpaMixPairCipher$((${index_vif} + 1))"
            eval "current_wpamixpaircipher=\$$current_wpamixpaircipher"
            echo "wifi0_WpaMixPairCipher$((${index_vif} + 1)) is $current_wpamixpaircipher"


            if [ "${index_vif}" = "0" ]; then
            export AP_RADIUSSERVER="$wifi0_radius_ipaddr"
            echo "WLAN_BOOT_PRINT: AP_RADIUSSERVER is ${AP_RADIUSSERVER}"
            else
            export AP_RADIUSSERVER_$((${index_vif} * 2 + 1))="$wifi0_radius_ipaddr"
            echo "WLAN_BOOT_PRINT: AP_RADIUSSERVER_$((${index_vif} * 2 + 1)) is ${wifi0_radius_ipaddr}"
            fi
            if [ "${index_vif}" = "0" ]; then
            export AP_RADIUSPORT="$wifi0_radius_port"
            echo "WLAN_BOOT_PRINT: AP_RADIUSPORT is ${AP_RADIUSPORT}"
            else
            export AP_RADIUSPORT_$((${index_vif} * 2 + 1))="$wifi0_radius_port"
            echo "WLAN_BOOT_PRINT: AP_RADIUSPORT_$((${index_vif} * 2 + 1)) is $wifi0_radius_port"
            fi

            eval "wifi0_RekeyMethod$((${index_vif} + 1))=\"$wifi0_rekey_mode\""
            current_rekeymethod="wifi0_RekeyMethod$((${index_vif} + 1))"
            eval "current_rekeymethod=\$$current_rekeymethod"
            echo "wifi0_RekeyMethod$((${index_vif} + 1)) is $current_rekeymethod"

            eval "wifi0_RekeyInterval$((${index_vif} + 1))=\"$(get_rekey_interval ${wifi0_rekey_mode} ${wifi0_rekey_time_interval} ${wifi0_rekey_pkt_interval})\""
            current_rekeyinterval="wifi0_RekeyInterval$((${index_vif} + 1))"
            eval "current_rekeyinterval=\$$current_rekeyinterval"
            echo "wifi0_RekeyInterval$((${index_vif} + 1)) is $current_rekeyinterval"


            if [ "${index_vif}" = "0" ]; then
            export AP_SSID="${wifi0_ssid}"
            echo "WLAN_BOOT_PRINT: AP_SSID is ${AP_SSID}"
            else
            export AP_SSID_$((${index_vif} * 2 + 1))="${wifi0_ssid}"
            echo "WLAN_BOOT_PRINT: AP_SSID_$((${index_vif} * 2 + 1)) is ${wifi0_ssid}"
            fi

            if [ "${index_vif}" = "0" ]; then
            export AP_RADIUSSECRET="${wifi0_radius_key}"
            echo "WLAN_BOOT_PRINT: AP_RADIUSSECRET is ${AP_RADIUSSECRET}"
            else
            export AP_RADIUSSECRET_$((${index_vif} * 2 + 1))="${wifi0_radius_key}"
            echo "WLAN_BOOT_PRINT: AP_RADIUSSECRET_$((${index_vif} * 2 + 1)) is ${wifi0_radius_key}"
            fi

            if [ "${index_vif}" = "0" ]; then
            export AP_PASSPHRASE="${wifi0_key}"
            echo "WLAN_BOOT_PRINT: AP_PASSPHRASE is ${AP_PASSPHRASE}"
            else
            export AP_PASSPHRASE_$((${index_vif} * 2 + 1))="${wifi0_key}"
            echo "WLAN_BOOT_PRINT: AP_PASSPHRASE_$((${index_vif} * 2 + 1)) is ${wifi0_key}"
            fi

            if [ "${index_vif}" = "0" ]; then
            export AP_ENABLE_SSID="$wifi0_enable"
            echo "WLAN_BOOT_PRINT: AP_ENABLE_SSID is ${AP_ENABLE_SSID}"
            else
            export AP_ENABLE_SSID_$((${index_vif} * 2 + 1))="$wifi0_enable"
            echo "WLAN_BOOT_PRINT: AP_ENABLE_SSID_$((${index_vif} * 2 + 1)) is ${wifi0_enable}"
            fi

        elif [ "$index_if" = "1" ]; then
            export AP_SECMODE_$((${index_vif} * 2 + 2))="$(get_convert_authmode $wifi1_secmode $wifi1_encmode $wifi1_wpacap)"
            echo "WLAN_BOOT_PRINT: AP_SECMODE_$((${index_vif} * 2 + 2)) is $(get_convert_authmode $wifi1_secmode $wifi1_encmode $wifi1_wpacap)"

            export AP_ENCRYPTYPE_$((${index_vif} * 2 + 2))="$(get_convert_crypto $wifi1_secmode $wifi1_crypto)"
            echo "WLAN_BOOT_PRINT: AP_ENCRYPTYPE_$((${index_vif} * 2 + 2)) is $(get_convert_crypto $wifi1_secmode $wifi1_crypto)"

            eval "wifi1_WpaMixPairCipher$((${index_vif} + 1))=\"$(get_convert_mixed_cipher_mode $wifi1_secmode $wifi1_crypto $wifi1_wpacap)\""
            current_wpamixpaircipher="wifi1_WpaMixPairCipher$((${index_vif} + 1))"
            eval "current_wpamixpaircipher=\$$current_wpamixpaircipher"
            echo "wifi1_WpaMixPairCipher$((${index_vif} + 1)) is $current_wpamixpaircipher"

            export AP_RADIUSSERVER_$((${index_vif} * 2 + 2))="$wifi1_radius_ipaddr"
            echo "WLAN_BOOT_PRINT: AP_RADIUSSERVER_$((${index_vif} * 2 + 2)) is ${wifi1_radius_ipaddr}"

            export AP_RADIUSPORT_$((${index_vif} * 2 + 2))="$wifi1_radius_port"
            echo "WLAN_BOOT_PRINT: AP_RADIUSPORT_$((${index_vif} * 2 + 2)) is ${wifi1_radius_port}"

            eval "wifi1_RekeyMethod$((${index_vif} + 1))=\"$wifi1_rekey_mode\""
            current_rekeymethod="wifi1_RekeyMethod$((${index_vif} + 1))"
            eval "current_rekeymethod=\$$current_rekeymethod"
            echo "wifi1_RekeyMethod$((${index_vif} + 1)) is $current_rekeymethod"

            eval "wifi1_RekeyInterval$((${index_vif} + 1))=\"$(get_rekey_interval ${wifi1_rekey_mode} ${wifi1_rekey_time_interval} ${wifi1_rekey_pkt_interval})\""
            current_rekeyinterval="wifi1_RekeyInterval$((${index_vif} + 1))"
            eval "current_rekeyinterval=\$$current_rekeyinterval"
            echo "wifi1_RekeyInterval$((${index_vif} + 1)) is $current_rekeyinterval"

            export AP_SSID_$((${index_vif} * 2 + 2))="${wifi1_ssid}"
            echo "WLAN_BOOT_PRINT: AP_SSID_$((${index_vif} * 2 + 2)) is ${wifi1_ssid}"

            export AP_RADIUSSECRET_$((${index_vif} * 2 + 2))="${wifi1_radius_key}"
            echo "WLAN_BOOT_PRINT: AP_RADIUSSECRET_$((${index_vif} * 2 + 2)) is ${wifi1_radius_key}"

            export AP_PASSPHRASE_$((${index_vif} * 2 + 2))="${wifi1_key}"
            echo "WLAN_BOOT_PRINT: AP_PASSPHRASE_$((${index_vif} * 2 + 2)) is ${wifi1_key}"

            export AP_ENABLE_SSID_$((${index_vif} * 2 + 2))="$wifi1_enable"
            echo "WLAN_BOOT_PRINT: AP_ENABLE_SSID_$((${index_vif} * 2 + 2)) is ${wifi1_enable}"

        fi
        index_vif=$(($index_vif + 1))
    done
#STA START>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    apcli_num=$(get_rule_value "wl${index_if}_apcli_rule_num" "0" "") 
    while [ $index_apcli -lt $apcli_num ]
    do
        rule="wl${index_if}_apcli_rule"
        for item in $wlv_apcli_rule_item; do {
            eval "wifi${index_if}_apcli_${item}=\"$(get_rule_value ${rule} ${index_apcli} ${item})\""
        } done
      
        #Added by Mario Huang for Station 802.1X
        rule="wl${index_if}_wpa_auth_rule"
        for item in $wlv_wpa_auth_rule_item; do {
            eval "wifi${index_if}_apcli_${item}=\"$(get_rule_value ${rule} ${index_apcli} ${item})\""
        } done
 
        rule="wl${index_if}_apcli_sec_wep_rule"
        for item in $wlv_apcli_sec_wep_rule_item; do {
            eval "wifi${index_if}_apcli_sec_wep_${item}=\"$(get_rule_value ${rule} ${index_apcli} ${item})\""
        } done

        rule="wl${index_if}_apcli_sec_wpa_rule"
        for item in $wlv_apcli_sec_wpa_rule_item; do {
            eval "wifi${index_if}_apcli_sec_wpa_${item}=\"$(get_rule_value ${rule} ${index_apcli} ${item})\""
        } done
        
        rule="wl${index_if}_apcli_sec_wpa2_rule"
        for item in $wlv_apcli_sec_wpa2_rule_item; do {
            eval "wifi${index_if}_apcli_sec_wpa2_${item}=\"$(get_rule_value ${rule} ${index_apcli} ${item})\""
        } done
        
        #assign authentication mode
        if [ "$index_if" = "0" ]; then
            export STA0_ENABLE="${wifi0_apcli_enable}"
            echo "WLAN_BOOT_PRINT: STA0_ENABLE is ${STA0_ENABLE}"
            export STA0_ASSOC_SSID="$wifi0_apcli_ssid"
            echo "WLAN_BOOT_PRINT: STA0_ASSOC_SSID is ${STA0_ASSOC_SSID}"
            export STA0_ASSOC_BSSID="$wifi0_apcli_bssid"
            echo "WLAN_BOOT_PRINT: STA0_ASSOC_BSSID is ${STA0_ASSOC_BSSID}"
            if [ $wifi0_apcli_secmode = "psk2" ]; then
               export STA0_SECMODE="$(get_convert_authmode ${wifi0_apcli_secmode} ${wifi0_apcli_sec_wep_encmode})"
               echo "WLAN_BOOT_PRINT: STA0_SECMODE is ${STA0_SECMODE}"
               export STA0_ENCRYPTYPE="$(get_convert_crypto ${wifi0_apcli_secmode} ${wifi0_apcli_sec_wpa2_crypto})"
               echo "WLAN_BOOT_PRINT: STA0_ENCRYPTYPE is ${STA0_ENCRYPTYPE}"
               #eval "wifi0_ApCliWPAPSK=\"$( echo $wifi0_apcli_sec_wpa2_key| sed -e 's/\\/\\\\/g;s/`/\\\`/g;s/"/\\\"/g')\""
               export STA0_PASSPHRASE="$wifi0_apcli_sec_wpa2_key"
               echo "WLAN_BOOT_PRINT: STA0_PASSPHRASE is ${STA0_PASSPHRASE}"
            elif [ $wifi0_apcli_secmode = "psk" ]; then
               export STA0_SECMODE=$(get_convert_authmode ${wifi0_apcli_secmode} ${wifi0_apcli_sec_wep_encmode})
               echo "WLAN_BOOT_PRINT: STA0_SECMODE is ${STA0_SECMODE}"
               export STA0_ENCRYPTYPE="$(get_convert_crypto ${wifi0_apcli_secmode} ${wifi0_apcli_sec_wpa_crypto})"
               echo "WLAN_BOOT_PRINT: STA0_ENCRYPTYPE is ${STA0_ENCRYPTYPE}"
               #eval "wifi0_ApCliWPAPSK=\"$( echo $wifi0_apcli_sec_wpa_key | sed -e 's/\\/\\\\/g;s/`/\\\`/g;s/"/\\\"/g')\""
               export STA0_PASSPHRASE="$wifi0_apcli_sec_wpa_key"
               echo "WLAN_BOOT_PRINT: STA0_PASSPHRASE is ${STA0_PASSPHRASE}"
            elif [ $wifi0_apcli_secmode = "wep" ]; then
               export STA0_SECMODE=$(get_convert_authmode ${wifi0_apcli_secmode} ${wifi0_apcli_sec_wep_encmode})
               echo "WLAN_BOOT_PRINT: STA0_SECMODE is ${STA0_SECMODE}"
            #Added by Mario Huang for Station 802.1X
            elif [ $wifi0_apcli_secmode = "wpa2" -o $wifi0_apcli_secmode = "wpa" ]; then
               export STA0_SECMODE=$(get_convert_authmode ${wifi0_apcli_secmode} ${wifi0_apcli_sec_wep_encmode})
               echo "WLAN_BOOT_PRINT: STA0_SECMODE is ${STA0_SECMODE}"
               export STA0_ENCRYPTYPE="$(get_convert_crypto ${wifi0_apcli_secmode} ${wifi0_apcli_wpa_crypto})"
               echo "WLAN_BOOT_PRINT: STA0_ENCRYPTYPE is ${STA0_ENCRYPTYPE}"
               export STA0_PROTO="$(get_convert_proto ${wifi0_apcli_secmode})"
               echo "WLAN_BOOT_PRINT: STA0_PROTO is ${STA0_PROTO}"
               export STA0_EAP="$(get_convert_eap ${wifi0_apcli_wpa_auth})"
               echo "WLAN_BOOT_PRINT: STA0_EAP is ${STA0_EAP}"
               export STA0_USER="${wifi0_apcli_wpa_user}"
               echo "WLAN_BOOT_PRINT: STA0_USER is ${STA0_USER}"
               export STA0_PASSWD="${wifi0_apcli_wpa_passwd}"
               echo "WLAN_BOOT_PRINT: STA0_PASSWD is ${STA0_PASSWD}"
            else
               export STA0_SECMODE=$(get_convert_authmode ${wifi0_apcli_secmode} ${wifi0_apcli_sec_wep_encmode})
               echo "WLAN_BOOT_PRINT: STA0_SECMODE is ${STA0_SECMODE}"
               export STA0_ENCRYPTYPE="$(get_convert_crypto ${wifi0_apcli_secmode} ${wifi0_apcli_sec_wpa_crypto})"
               echo "WLAN_BOOT_PRINT: STA0_ENCRYPTYPE is ${STA0_ENCRYPTYPE}"
               export STA0_PASSPHRASE="$wifi0_apcli_sec_wpa_key"
               echo "WLAN_BOOT_PRINT: STA0_PASSPHRASE is ${STA0_PASSPHRASE}"
            fi
    
            export STA0_DEFAULT_KEYID="$wifi0_apcli_sec_wep_key_index"
            echo "WLAN_BOOT_PRINT: STA0_DEFAULT_KEYID is ${STA0_DEFAULT_KEYID}"
            nv_key_type_str="$(nvram show wl${index_if}_apcli_sec_wep_rule 0 keytype)"
            if [ -z "${nv_key_type_str}" ]; then
                export STA0_KEY1_TYPE=$(get_wep_key_type '${wifi0_apcli_sec_wep_key1}')
            echo "WLAN_BOOT_PRINT: STA0_KEY1_TYPE is ${STA0_KEY1_TYPE}"
                export STA0_KEY2_TYPE=$(get_wep_key_type '${wifi0_apcli_sec_wep_key2}')
            echo "WLAN_BOOT_PRINT: STA0_KEY2_TYPE is ${STA0_KEY2_TYPE}"
                export STA0_KEY3_TYPE=$(get_wep_key_type '${wifi0_apcli_sec_wep_key3}')
            echo "WLAN_BOOT_PRINT: STA0_KEY3_TYPE is ${STA0_KEY3_TYPE}"
                export STA0_KEY4_TYPE=$(get_wep_key_type '${wifi0_apcli_sec_wep_key4}')
            echo "WLAN_BOOT_PRINT: STA0_KEY4_TYPE is ${STA0_KEY4_TYPE}"
            else
                export STA0_KEY1_TYPE=${nv_key_type_str}
            echo "WLAN_BOOT_PRINT: STA0_KEY1_TYPE is ${STA0_KEY1_TYPE}"
                export STA0_KEY2_TYPE=${nv_key_type_str}
            echo "WLAN_BOOT_PRINT: STA0_KEY2_TYPE is ${STA0_KEY2_TYPE}"
                export STA0_KEY3_TYPE=${nv_key_type_str}
            echo "WLAN_BOOT_PRINT: STA0_KEY3_TYPE is ${STA0_KEY3_TYPE}"
                export STA0_KEY4_TYPE=${nv_key_type_str}
            echo "WLAN_BOOT_PRINT: STA0_KEY4_TYPE is ${STA0_KEY4_TYPE}"
            fi
            export STA0_KEY1="${wifi0_apcli_sec_wep_key1}"
            echo "WLAN_BOOT_PRINT: STA0_KEY1 is ${STA0_KEY1}"
            export STA0_KEY2="${wifi0_apcli_sec_wep_key2}"
            echo "WLAN_BOOT_PRINT: STA0_KEY2 is ${STA0_KEY2}"
            export STA0_KEY3="${wifi0_apcli_sec_wep_key3}"
            echo "WLAN_BOOT_PRINT: STA0_KEY3 is ${STA0_KEY3}"
            export STA0_KEY4="${wifi0_apcli_sec_wep_key4}"
            echo "WLAN_BOOT_PRINT: STA0_KEY4 is ${STA0_KEY4}"

            export STA0_ENCMODE="$(get_convert_encmode ${wifi0_apcli_sec_wep_encmode})"
            echo "WLAN_BOOT_PRINT: STA0_ENCMODE is ${STA0_ENCMODE}"
        elif [ "$index_if" = "1" ]; then
            export STA1_ENABLE=$wifi1_apcli_enable
            echo "WLAN_BOOT_PRINT: STA1_ENABLE is ${STA1_ENABLE}"
            export STA1_ASSOC_SSID="$wifi1_apcli_ssid"
            echo "WLAN_BOOT_PRINT: STA1_ASSOC_SSID is ${STA1_ASSOC_SSID}"
            export STA1_ASSOC_BSSID=$wifi1_apcli_bssid
            echo "WLAN_BOOT_PRINT: STA1_ASSOC_BSSID is ${STA1_ASSOC_BSSID}"
            if [ $wifi1_apcli_secmode = "psk2" ]; then
               export STA1_SECMODE="$(get_convert_authmode ${wifi1_apcli_secmode} ${wifi1_apcli_sec_wep_encmode})"
               echo "WLAN_BOOT_PRINT: STA1_SECMODE is ${STA1_SECMODE}"
               export STA1_ENCRYPTYPE="$(get_convert_crypto ${wifi1_apcli_secmode} ${wifi1_apcli_sec_wpa2_crypto})"
               echo "WLAN_BOOT_PRINT: STA1_ENCRYPTYPE is ${STA1_ENCRYPTYPE}"
               export STA1_PASSPHRASE="$wifi1_apcli_sec_wpa2_key"
               echo "WLAN_BOOT_PRINT: STA1_PASSPHRASE is ${STA1_PASSPHRASE}"
            elif [ $wifi1_apcli_secmode = "psk" ]; then
               export STA1_SECMODE=$(get_convert_authmode ${wifi1_apcli_secmode} ${wifi1_apcli_sec_wep_encmode})
               echo "WLAN_BOOT_PRINT: STA1_SECMODE is ${STA1_SECMODE}"
               export STA1_ENCRYPTYPE="$(get_convert_crypto ${wifi1_apcli_secmode} ${wifi1_apcli_sec_wpa_crypto})"
               echo "WLAN_BOOT_PRINT: STA1_ENCRYPTYPE is ${STA1_ENCRYPTYPE}"
               export STA1_PASSPHRASE="$wifi1_apcli_sec_wpa_key"
               echo "WLAN_BOOT_PRINT: STA1_PASSPHRASE is ${STA1_PASSPHRASE}"
            elif [ $wifi1_apcli_secmode = "wep" ]; then
               export STA1_SECMODE=$(get_convert_authmode ${wifi1_apcli_secmode} ${wifi1_apcli_sec_wep_encmode})
               echo "WLAN_BOOT_PRINT: STA1_SECMODE is ${STA1_SECMODE}"
            #Added by Mario Huang for Station 802.1X
            elif [ $wifi1_apcli_secmode = "wpa2" -o $wifi1_apcli_secmode = "wpa" ]; then
               export STA1_SECMODE=$(get_convert_authmode ${wifi1_apcli_secmode} ${wifi1_apcli_sec_wep_encmode})
               echo "WLAN_BOOT_PRINT: STA1_SECMODE is ${STA1_SECMODE}"
               export STA1_ENCRYPTYPE="$(get_convert_crypto ${wifi1_apcli_secmode} ${wifi1_apcli_wpa_crypto})"
               echo "WLAN_BOOT_PRINT: STA1_ENCRYPTYPE is ${STA1_ENCRYPTYPE}"
               export STA1_PROTO="$(get_convert_proto ${wifi1_apcli_secmode})"
               echo "WLAN_BOOT_PRINT: STA1_PROTO is ${STA1_PROTO}"
               export STA1_EAP="$(get_convert_eap ${wifi1_apcli_wpa_auth})"
               echo "WLAN_BOOT_PRINT: STA1_EAP is ${STA1_EAP}"
               export STA1_USER="${wifi1_apcli_wpa_user}"
               echo "WLAN_BOOT_PRINT: STA1_USER is ${STA1_USER}"
               export STA1_PASSWD="${wifi1_apcli_wpa_passwd}"
               echo "WLAN_BOOT_PRINT: STA1_PASSWD is ${STA1_PASSWD}"
            else
               export STA1_SECMODE=$(get_convert_authmode ${wifi1_apcli_secmode} ${wifi1_apcli_sec_wep_encmode})
               echo "WLAN_BOOT_PRINT: STA1_SECMODE is ${STA1_SECMODE}"
               export STA1_ENCRYPTYPE="$(get_convert_crypto ${wifi1_apcli_secmode} ${wifi1_apcli_sec_wpa_crypto})"
               echo "WLAN_BOOT_PRINT: STA1_ENCRYPTYPE is ${STA1_ENCRYPTYPE}"
               export STA1_PASSPHRASE="$wifi1_apcli_sec_wpa_key"
               echo "WLAN_BOOT_PRINT: STA1_PASSPHRASE is ${STA1_PASSPHRASE}"
            fi

            export STA1_DEFAULT_KEYID=$wifi1_apcli_sec_wep_key_index
            echo "WLAN_BOOT_PRINT: STA1_DEFAULT_KEYID is ${STA1_DEFAULT_KEYID}"
            nv_key_type_str="$(nvram show wl${index_if}_apcli_sec_wep_rule 0 keytype)"
            if [ -z "${nv_key_type_str}" ]; then
                export STA1_KEY1_TYPE=$(get_wep_key_type '${wifi1_apcli_sec_wep_key1}')
                echo "WLAN_BOOT_PRINT: STA1_KEY1_TYPE is ${STA1_KEY1_TYPE}"
                export STA1_KEY2_TYPE=$(get_wep_key_type '${wifi1_apcli_sec_wep_key2}')
                echo "WLAN_BOOT_PRINT: STA1_KEY2_TYPE is ${STA1_KEY2_TYPE}"
                export STA1_KEY3_TYPE=$(get_wep_key_type '${wifi1_apcli_sec_wep_key3}')
                echo "WLAN_BOOT_PRINT: STA1_KEY3_TYPE is ${STA1_KEY3_TYPE}"
                export STA1_KEY4_TYPE=$(get_wep_key_type '${wifi1_apcli_sec_wep_key4}')
                echo "WLAN_BOOT_PRINT: STA1_KEY4_TYPE is ${STA1_KEY4_TYPE}"
            else
                export STA1_KEY1_TYPE=${nv_key_type_str}
                echo "WLAN_BOOT_PRINT: STA1_KEY1_TYPE is ${STA1_KEY1_TYPE}"
                export STA1_KEY2_TYPE=${nv_key_type_str}
                echo "WLAN_BOOT_PRINT: STA1_KEY2_TYPE is ${STA1_KEY2_TYPE}"
                export STA1_KEY3_TYPE=${nv_key_type_str}
                echo "WLAN_BOOT_PRINT: STA1_KEY3_TYPE is ${STA1_KEY3_TYPE}"
                export STA1_KEY4_TYPE=${nv_key_type_str}
                echo "WLAN_BOOT_PRINT: STA1_KEY4_TYPE is ${STA1_KEY4_TYPE}"
            fi
            export STA1_KEY1="${wifi1_apcli_sec_wep_key1}"
                echo "WLAN_BOOT_PRINT: STA1_KEY1 is ${STA1_KEY1}"
            export STA1_KEY2="${wifi1_apcli_sec_wep_key2}"
                echo "WLAN_BOOT_PRINT: STA1_KEY2 is ${STA1_KEY2}"
            export STA1_KEY3="${wifi1_apcli_sec_wep_key3}"
                echo "WLAN_BOOT_PRINT: STA1_KEY3 is ${STA1_KEY3}"
            export STA1_KEY4="${wifi1_apcli_sec_wep_key4}"
                echo "WLAN_BOOT_PRINT: STA1_KEY4 is ${STA1_KEY4}"
            export STA1_ENCMODE="$(get_convert_encmode ${wifi1_apcli_sec_wep_encmode})"
                echo "WLAN_BOOT_PRINT: STA1_ENCMODE is ${STA1_ENCMODE}"
        fi

        index_apcliid=$(($index_apcliid + 1))
        index_apcli=$(($index_apcli + 1))
    done
    index_apcli=0
#STA END<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    index_vif=0
    index_if=$(($index_if + 1))
done
set_wl_var
set_wl_var_5g
}

########################################################################
# Main program
########################################################################
atheros_get_wl_rule_var

###################################################################################

##
## Set Network configuration
##
## AP_IPADDR  = IP address of the bridge
## WAN_IPADDR = Fixed IP address of the WAN, if it's not bridged
## WAN_MODE   = bridged for attached to bridged, Get address if dhcp, fixed address
##              if static
##
###################################################################################
##
## First, let's see if we have the modules loaded.  If not, call the
## rc.wlan script to load them
##

MODLIST=`lsmod | grep ath_hal`

if [ "${MODLIST}" = "" ]; then
    /etc/wl/rc.wlan up

    ##
    ## Check for bad return value.  If so, exit
    ##

    if [ $? != 0 ]; then
        exit 255
    fi
else
    echo "WLAN_BOOT_PRINT: Modules already loaded"
fi

local WIFI0_FOUND=0
local WIFI1_FOUND=0

cat /proc/net/dev | grep wifi0
if [ "$?" = "0" ]; then
    WIFI0_FOUND=1
fi  

cat /proc/net/dev | grep wifi1
if [ "$?" = "0" ]; then
    WIFI1_FOUND=1
fi 

if [ "$WIFI0_FOUND" = "1" -a "$WIFI1_FOUND" = "1" ]; then
export AP_STARTMODE="dual"
elif [ "$WIFI0_FOUND" = "1" -a "$WIFI1_FOUND" = "0" ]; then
export AP_STARTMODE="single"
else
echo "WLAN_BOOT_PRINT: ERROR:WI-FI does not init correctly......"
fi

echo "WLAN_BOOT_PRINT: AP_STARTMODE is $AP_STARTMODE"

export AP_RADIO_ID=0
export AP_RADIO_ID_3=0
export AP_RADIO_ID_5=0
export AP_RADIO_ID_7=0
export AP_RADIO_ID_9=0
export AP_RADIO_ID_11=0
export AP_RADIO_ID_13=0
export AP_RADIO_ID_15=0
#cfg -a AP_RADIO_ID_2=${AP_RADIO_ID_2:=1}
export AP_RADIO_ID_2=1
export AP_RADIO_ID_4=1
export AP_RADIO_ID_6=1
export AP_RADIO_ID_8=1
export AP_RADIO_ID_10=1
export AP_RADIO_ID_12=1
export AP_RADIO_ID_14=1
export AP_RADIO_ID_16=1

export RX_CHAINMASK=7
export TX_CHAINMASK=7
if [ "${AP_STARTMODE}" = "dual" ]; then
    export RX_CHAINMASK_2=7
    export TX_CHAINMASK_2=7
fi
##rewrite it
##Get 8 WLAN Modes for 2.4G
if [ "${wifi0_HT_OpMode}" = "0" ]; then
export AP_MODE="ap"
export AP_MODE_3="ap"
export AP_MODE_5="ap"
export AP_MODE_7="ap"
export AP_MODE_9="ap"
export AP_MODE_11="ap"
export AP_MODE_13="ap"
export AP_MODE_15="ap"
elif [ "${wifi0_HT_OpMode}" = "1" ]; then
export AP_MODE="sta"
export AP_MODE_3="sta"
export AP_MODE_5="sta"
export AP_MODE_7="sta"
export AP_MODE_9="sta"
export AP_MODE_11="sta"
export AP_MODE_13="sta"
export AP_MODE_15="sta"
#Added by Mario Huang for Station 802.1X
fi
echo "WLAN_BOOT_PRINT: AP_MODE is ${AP_MODE}"
echo "WLAN_BOOT_PRINT: AP_MODE_3 is ${AP_MODE_3}"
echo "WLAN_BOOT_PRINT: AP_MODE_5 is ${AP_MODE_5}"
echo "WLAN_BOOT_PRINT: AP_MODE_7 is ${AP_MODE_7}"
echo "WLAN_BOOT_PRINT: AP_MODE_9 is ${AP_MODE_9}"
echo "WLAN_BOOT_PRINT: AP_MODE_11 is ${AP_MODE_11}"
echo "WLAN_BOOT_PRINT: AP_MODE_13 is ${AP_MODE_13}"
echo "WLAN_BOOT_PRINT: AP_MODE_15 is ${AP_MODE_15}"
#
#Operation Mode for 5G
if [ "${AP_STARTMODE}" = "dual" ]; then
    if [ "${wifi1_HT_OpMode}" = "0" ]; then
    export AP_MODE_2="ap"
    export AP_MODE_4="ap"
    export AP_MODE_6="ap"
    export AP_MODE_8="ap"
    export AP_MODE_10="ap"
    export AP_MODE_12="ap"
    export AP_MODE_14="ap"
    export AP_MODE_16="ap"
    elif [ "${wifi1_HT_OpMode}" = "1" ]; then
    export AP_MODE_2="sta"
    export AP_MODE_4="sta"
    export AP_MODE_6="sta"
    export AP_MODE_8="sta"
    export AP_MODE_10="sta"
    export AP_MODE_12="sta"
    export AP_MODE_14="sta"
    export AP_MODE_16="sta"
    fi
    echo "WLAN_BOOT_PRINT: AP_MODE_2 is ${AP_MODE_2}"
    echo "WLAN_BOOT_PRINT: AP_MODE_4 is ${AP_MODE_4}"
    echo "WLAN_BOOT_PRINT: AP_MODE_6 is ${AP_MODE_6}"
    echo "WLAN_BOOT_PRINT: AP_MODE_8 is ${AP_MODE_8}"
    echo "WLAN_BOOT_PRINT: AP_MODE_10 is ${AP_MODE_10}"
    echo "WLAN_BOOT_PRINT: AP_MODE_12 is ${AP_MODE_12}"
    echo "WLAN_BOOT_PRINT: AP_MODE_14 is ${AP_MODE_14}"
    echo "WLAN_BOOT_PRINT: AP_MODE_16 is ${AP_MODE_16}"
fi
#####################################################################################
## The following parameters are board specific, and should not be modified
#####################################################################################

#export ATH_use_eeprom=0
# SET it to 1 if no "A" band support 
# export AP_NO_A_BAND=1
export PATH=$PATH:/etc/wl
/etc/wl/wlan-security
/etc/wl/wmm
