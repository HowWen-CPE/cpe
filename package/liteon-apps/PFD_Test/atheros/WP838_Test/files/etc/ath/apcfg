###################################################################################
##  apcfg
##
##  Configuration file for Atheros AP.
##  This file will "predefine" default configuration data for the AP.  This
##  will first read all configuration data from flash (cfg -e), then fill in any
##  defaults that are missing.  Thus the defaults will appear on the web pages
##  even if the configuration store has been cleared.
##
###################################################################################
##
## Get the current settings from flash/cache area
##

#Daniel Add for setting SSID with backquote and backslash. 2013-12-04
#cfg -e > /tmp/vars.$$
cfg -e |grep -v AP_SSID >/tmp/vars.$$
my_vaps="'' _2 _3 _4 _5 _6 _7 _8 _9 _10 _11 _12 _13 _14 _15 _16"
for i in $my_vaps;
	do
		if [ "${i}" = "''" ]; then
			i=""
		fi
		ITER_SSID="AP_SSID$i"
		var2=$(cfg -v $ITER_SSID|sed 's/\\/\\\\/g'|sed 's/`/\\`/g'|sed 's/\"/\\\"/g')
		if [ "${i}" = "''" ]; then
			i=""
			echo "export AP_SSID=\"$var2\"" >> /tmp/vars.$$
		else
			echo "export AP_SSID$i=\"$var2\"" >>/tmp/vars.$$	
		fi
	done
. /tmp/vars.$$
rm /tmp/vars.$$


##
## Set Network configuration
##
## AP_IPADDR  = IP address of the bridge
## WAN_IPADDR = Fixed IP address of the WAN, if it's not bridged
## WAN_MODE   = bridged for attached to bridged, Get address if dhcp, fixed address
##              if static
##
###################################################################################

cfg -a AP_IPADDR=${AP_IPADDR:="192.168.1.2"}
cfg -a AP_NETMASK=${AP_NETMASK:="255.255.255.0"}
cfg -a WAN_MODE=${WAN_MODE:="bridged"}
cfg -a WAN_IPADDR=${WAN_IPADDR:="192.168.2.1"}
cfg -a WAN_NETMASK=${WAN_NETMASK:="255.255.255.0"}

#Bevin Added wifi0 and wifi1 initial MAC address. 2013-11-18
cfg -a MAC_WIFI0=${MAC_WIFI0:=""}
cfg -a MAC_WIFI1=${MAC_WIFI1:=""}

#Add default MAC Adress for Ethernet device, Sirian@Liteon, 2013-11-21
cfg -a MAC_ETH0=${MAC_ETH0:=""}
cfg -a MAC_ETH1=${MAC_ETH1:=""}
#
# Indicate if you want the WLAN to be activated on boot up.
#

cfg -a WLAN_ON_BOOT=${WLAN_ON_BOOT:="y"}

#
# AP Start Mode
# This can be overridded by environmental variables
# Modes can be
#    standard := standard single AP start mode
#      rootap := WDS root AP for WDS modes
#    reptater := WDS repeater station
#      client := WDS "virtual wire" client
#       multi := Multiple BSSID with all encryption types
#      stafwd := Station mode with address forwarding enabled
#
#

cfg -a AP_STARTMODE=${AP_STARTMODE:="dual"}
cfg -a AP_RADIO_ID=${AP_RADIO_ID:=0}
cfg -a AP_RADIO_ID_2=${AP_RADIO_ID_2:=1}
export NUMRADIO_AHB=1


#################################################################################
## Default Parameters
## If these are not set explictly by exporting environmental variables, the following
## Defaults will be applied
#################################################################################
#
# AP_PRIMARY_CH could be
#                a number or
#                11ng (which means auto-scan in 11ng mode)

cfg -a AP_PRIMARY_CH=${AP_PRIMARY_CH:=6}


if [ "${AP_MODE}" = "sta-wds" -o "${AP_MODE}" = "sta" -o "${AP_MODE}" = "sta-ext" ]; then
	cfg -a AP_CHMODE=
else
	cfg -a AP_CHMODE=${AP_CHMODE:="11NGHT20"}
fi

##
## Set up the channel for dual mode
##

cfg -a AP_PRIMARY_CH_2=${AP_PRIMARY_CH_2:=40}



if [ "${AP_MODE_2}" = "sta-wds" -o "${AP_MODE_2}" = "sta" -o "${AP_MODE}" = "sta-ext" ]; then
	cfg -a AP_CHMODE_2=
else
	cfg -a AP_CHMODE_2=${AP_CHMODE_2:="11NAHT40MINUS"}
fi


##
## This is for pure G or pure N operations.  Hmmmm...
##

cfg -a PUREG=${PUREG:=0}
cfg -a PUREN=${PUREN:=0}

##
## Channel Configuration Section
##

cfg -a TXQUEUELEN=${TXQUEUELEN:=1000}
cfg -a SHORTGI=${SHORTGI:=1}
cfg -a SHORTGI_2=${SHORTGI_2:=1}

#
# Aggregation.  First parameter enables/disables,
# second parameter sets the size limit
#

cfg -a AMPDU=${AMPDU:=1}
cfg -a AMPDU_2=${AMPDU_2:=64}
cfg -a AMPDUFRAMES=${AMPDUFRAMES:=32}
cfg -a AMPDUFRAMES_2=${AMPDUFRAMES_2:=32}
cfg -a AMPDULIMIT=${AMPDULIMIT:=50000}
cfg -a AMPDULIMIT_2=${AMPDULIMIT_2:=50000}
cfg -a AMPDUMIN=${AMPDUMIN:=32768}
cfg -a AMPDUMIN_2=${AMPDUMIN_2:=32768}
cfg -a CWMMODE=${CWMMODE:=1}
cfg -a CWMMODE_2=${CWMMODE_2:=1}
cfg -a RATECTL=${RATECTL:="auto"}
cfg -a MANRATE=${MANRATE:=0x8c8c8c8c}
cfg -a MANRETRIES=${MANRETRIES:=0x04040404}
cfg -a RX_CHAINMASK=${RX_CHAINMASK:=7}
cfg -a RX_CHAINMASK_2=${RX_CHAINMASK_2:=7}
cfg -a TX_CHAINMASK=${TX_CHAINMASK:=7}
cfg -a TX_CHAINMASK_2=${TX_CHAINMASK_2:=7}
cfg -a SETCH144=${SETCH144:=0}
cfg -a SETCH144_2=${SETCH144_2:=0}

cfg -a SWAP_LED=${SWAP_LED:=1}
cfg -a LED_CUSTOM=${LED_CUSTOM:=3}

##
## AP Identification Section
##

#cfg -a AP_SSID="${AP_SSID:=GP_WP838_SDK_2G}"

if [ "${AP_STARTMODE}" = "dual" ]; then
cfg -a AP_SSID="${AP_SSID:=GP_WP838_SDK_2G}"
cfg -a AP_SSID_2="${AP_SSID_2:=GP_WP838_SDK_5G}"
fi

if [ "${AP_STARTMODE}" = "multi" ]; then
cfg -a WPS_INDEPENDENT=1
cfg -a WEP_MBSSID=1
fi

##
## Set the default modes for multi configuration
##

cfg -a AP_MODE=${AP_MODE:="ap"}
cfg -a AP_MODE_2=${AP_MODE_2:="ap"}
cfg -a AP_MODE_3=${AP_MODE_3:="ap"}
cfg -a AP_MODE_4=${AP_MODE_4:="ap"}
cfg -a AP_MODE_5=${AP_MODE_5:="ap"}
cfg -a AP_MODE_6=${AP_MODE_6:="ap"}
cfg -a AP_MODE_7=${AP_MODE_7:="ap"}
cfg -a AP_MODE_8=${AP_MODE_8:="ap"}
cfg -a AP_MODE_9=${AP_MODE_9:="ap"}
cfg -a AP_MODE_10=${AP_MODE_10:="ap"}
cfg -a AP_MODE_11=${AP_MODE_11:="ap"}
cfg -a AP_MODE_12=${AP_MODE_12:="ap"}
cfg -a AP_MODE_13=${AP_MODE_13:="ap"}
cfg -a AP_MODE_14=${AP_MODE_14:="ap"}
cfg -a AP_MODE_15=${AP_MODE_15:="ap"}
cfg -a AP_MODE_16=${AP_MODE_16:="ap"}

##
## Set default security modes
##
export MAX_VAPS_PER_RADIO=16

cfg -a AP_SECMODE=${AP_SECMODE:="None"}
cfg -a AP_SECMODE_2=${AP_SECMODE_2:="None"}
cfg -a AP_SECMODE_3=${AP_SECMODE_3:="None"}
cfg -a AP_SECMODE_4=${AP_SECMODE_4:="None"}
cfg -a AP_SECMODE_5=${AP_SECMODE_5:="None"}
cfg -a AP_SECMODE_6=${AP_SECMODE_6:="None"}
cfg -a AP_SECMODE_7=${AP_SECMODE_7:="None"}
cfg -a AP_SECMODE_8=${AP_SECMODE_8:="None"}
cfg -a AP_SECMODE_9=${AP_SECMODE_9:="None"}
cfg -a AP_SECMODE_10=${AP_SECMODE_10:="None"}
cfg -a AP_SECMODE_11=${AP_SECMODE_11:="None"}
cfg -a AP_SECMODE_12=${AP_SECMODE_12:="None"}
cfg -a AP_SECMODE_13=${AP_SECMODE_13:="None"}
cfg -a AP_SECMODE_14=${AP_SECMODE_14:="None"}
cfg -a AP_SECMODE_15=${AP_SECMODE_15:="None"}
cfg -a AP_SECMODE_16=${AP_SECMODE_16:="None"}

##
## Set default secfile to PSK, only valid in WPA mode
##
## For the 4 wep keys, set the default values.  Note that the first key uses the _1
## trailer - it's not a VAP number, it's the number of the key.  This is done for
## both radios.
##

my_wep_keys="_1 _2 _3 _4"
for i in $my_wep_keys;
do
    if [ "${i}" = "''" ]; then
        i=""
    fi
    ITER_AP_WEP_RADIO_NUM0_KEY="WEP_RADIO_NUM0_KEY$i"
    ITER_AP_WEP_RADIO_NUM1_KEY="WEP_RADIO_NUM1_KEY$i"
    eval ITER_WEP_RADIO_NUM0_KEY=\$$ITER_AP_WEP_RADIO_NUM0_KEY
    eval ITER_WEP_RADIO_NUM1_KEY=\$$ITER_AP_WEP_RADIO_NUM1_KEY
    cfg -a $ITER_AP_WEP_RADIO_NUM0_KEY=${ITER_WEP_RADIO_NUM0_KEY:=""}
    cfg -a $ITER_AP_WEP_RADIO_NUM1_KEY=${ITER_WEP_RADIO_NUM1_KEY:=""}
done

##
## Now, for each radio, set the primary key and the mode value
##

#cfg -a AP_PRIMARY_KEY_0="${AP_PRIMARY_KEY_0:=1}"
#cfg -a AP_PRIMARY_KEY_1="${AP_PRIMARY_KEY_1:=1}"
cfg -a AP_WEP_MODE_0="${AP_WEP_MODE_0:=1}"
cfg -a AP_WEP_MODE_1="${AP_WEP_MODE_1:=1}"

my_vaps="'' _2 _3 _4 _5 _6 _7 _8 _9 _10 _11 _12 _13 _14 _15 _16 \
        _17 _18 _19 _20 _21 _22 _23 _24 _25 _26 _27 _28 _29 _30 _31 _32"
for i in $my_vaps;
do
    if [ "${i}" = "''" ]; then
        i=""
    fi
    ITER_AP_MODE="AP_MODE$i"
    ITER_AP_SECMODE="AP_SECMODE$i"
    ITER_AP_SECFILE="AP_SECFILE$i"
    ITER_AP_WPS_ENABLE="WPS_ENABLE$i"
    eval ITER_MODE=\$$ITER_AP_MODE
    eval ITER_SECMODE=\$$ITER_AP_SECMODE
    eval ITER_SECFILE=\$$ITER_AP_SECFILE
    eval ITER_WPS_ENABLE=\$$ITER_AP_WPS_ENABLE
    cfg -a $ITER_AP_MODE=${ITER_MODE:="ap"}
    cfg -a $ITER_AP_SECMODE=${ITER_SECMODE:="None"}
    cfg -a $ITER_AP_SECFILE=${ITER_SECFILE:="PSK"}
    cfg -a $ITER_AP_WPS_ENABLE=${ITER_WPS_ENABLE:="0"}
done

cfg -a AP_SECFILE=${AP_SECFILE:="PSK"}
cfg -a AP_SECFILE_2=${AP_SECFILE_2:="PSK"}
cfg -a AP_SECFILE_3=${AP_SECFILE_3:="PSK"}
cfg -a AP_SECFILE_4=${AP_SECFILE_4:="PSK"}
cfg -a AP_SECFILE_5=${AP_SECFILE_5:="PSK"}
cfg -a AP_SECFILE_6=${AP_SECFILE_6:="PSK"}
cfg -a AP_SECFILE_7=${AP_SECFILE_7:="PSK"}
cfg -a AP_SECFILE_8=${AP_SECFILE_8:="PSK"}
cfg -a AP_SECFILE_9=${AP_SECFILE_9:="PSK"}
cfg -a AP_SECFILE_10=${AP_SECFILE_10:="PSK"}
cfg -a AP_SECFILE_11=${AP_SECFILE_11:="PSK"}
cfg -a AP_SECFILE_12=${AP_SECFILE_12:="PSK"}
cfg -a AP_SECFILE_13=${AP_SECFILE_13:="PSK"}
cfg -a AP_SECFILE_14=${AP_SECFILE_14:="PSK"}
cfg -a AP_SECFILE_15=${AP_SECFILE_15:="PSK"}
cfg -a AP_SECFILE_16=${AP_SECFILE_16:="PSK"}


cfg -a WPS_ENABLE=${WPS_ENABLE:="0"}
cfg -a WPS_ENABLE_2=${WPS_ENABLE_2:="0"}
cfg -a WPS_ENABLE_3=${WPS_ENABLE_3:="0"}
cfg -a WPS_ENABLE_4=${WPS_ENABLE_4:="0"}
cfg -a WPS_ENABLE_5=${WPS_ENABLE_5:="0"}
cfg -a WPS_ENABLE_6=${WPS_ENABLE_6:="0"}
cfg -a WPS_ENABLE_7=${WPS_ENABLE_7:="0"}
cfg -a WPS_ENABLE_8=${WPS_ENABLE_8:="0"}
cfg -a WPS_ENABLE_9=${WPS_ENABLE_9:="0"}
cfg -a WPS_ENABLE_10=${WPS_ENABLE_10="0"}
cfg -a WPS_ENABLE_11=${WPS_ENABLE_11="0"}
cfg -a WPS_ENABLE_12=${WPS_ENABLE_12="0"}
cfg -a WPS_ENABLE_13=${WPS_ENABLE_13="0"}
cfg -a WPS_ENABLE_14=${WPS_ENABLE_14="0"}
cfg -a WPS_ENABLE_15=${WPS_ENABLE_15="0"}
cfg -a WPS_ENABLE_16=${WPS_ENABLE_16="0"}

## VoW defaults
cfg -a VOW_ENABLE=${VOW_ENABLE:="0"}
cfg -a VOW_DEBUG=${VOW_DEBUG:="0"}
cfg -a VOW_ENABLE_2=${VOW_ENABLE_2:="0"}
cfg -a VOW_DEBUG_2=${VOW_DEBUG_2:="0"}

##
## Default keys are Decimal (NOT hex)
##

cfg -a WEP_IS_HEX1=${WEP_IS_HEX1:="0"}
cfg -a WEP_IS_HEX2=${WEP_IS_HEX2:="0"}
cfg -a WEP_IS_HEX3=${WEP_IS_HEX3:="0"}
cfg -a WEP_IS_HEX4=${WEP_IS_HEX4:="0"}
cfg -a WEP_IS_HEX5=${WEP_IS_HEX5:="0"}
cfg -a WEP_IS_HEX6=${WEP_IS_HEX6:="0"}
cfg -a WEP_IS_HEX7=${WEP_IS_HEX7:="0"}
cfg -a WEP_IS_HEX8=${WEP_IS_HEX8:="0"}
cfg -a WEP_IS_HEX9=${WEP_IS_HEX9:="0"}
cfg -a WEP_IS_HEX10=${WEP_IS_HEX10:="0"}
cfg -a WEP_IS_HEX11=${WEP_IS_HEX11:="0"}
cfg -a WEP_IS_HEX12=${WEP_IS_HEX12:="0"}
cfg -a WEP_IS_HEX13=${WEP_IS_HEX13:="0"}
cfg -a WEP_IS_HEX14=${WEP_IS_HEX14:="0"}
cfg -a WEP_IS_HEX15=${WEP_IS_HEX15:="0"}
cfg -a WEP_IS_HEX16=${WEP_IS_HEX16:="0"}

cfg -a WPA_IS_HEX=${WPA_IS_HEX:="0"}
cfg -a WPA_IS_HEX_2=${WPA_IS_HEX_2:="0"}
cfg -a WPA_IS_HEX_3=${WPA_IS_HEX_3:="0"}
cfg -a WPA_IS_HEX_4=${WPA_IS_HEX_4:="0"}
cfg -a WPA_IS_HEX_5=${WPA_IS_HEX_5:="0"}
cfg -a WPA_IS_HEX_6=${WPA_IS_HEX_6:="0"}
cfg -a WPA_IS_HEX_7=${WPA_IS_HEX_7:="0"}
cfg -a WPA_IS_HEX_8=${WPA_IS_HEX_8:="0"}
cfg -a WPA_IS_HEX_9=${WPA_IS_HEX_9:="0"}
cfg -a WPA_IS_HEX_10=${WPA_IS_HEX_10:="0"}
cfg -a WPA_IS_HEX_11=${WPA_IS_HEX_11:="0"}
cfg -a WPA_IS_HEX_12=${WPA_IS_HEX_12:="0"}
cfg -a WPA_IS_HEX_13=${WPA_IS_HEX_13:="0"}
cfg -a WPA_IS_HEX_14=${WPA_IS_HEX_14:="0"}
cfg -a WPA_IS_HEX_15=${WPA_IS_HEX_15:="0"}
cfg -a WPA_IS_HEX_16=${WPA_IS_HEX_16:="0"}

##
## IEEE 802.11v Proxy ARP Support
##
cfg -a IEEE80211V_PROXYARP=${IEEE80211V_PROXYARP:="0"}

#Daniel Added Beacon Interval initial value. 2013-11-21
cfg -a BINTVAL=${BINTVAL:=100}
cfg -a BINTVAL_2=${BINTVAL_2:=100}
#Daniel Added for Lock Mac. 2014-01-27
cfg -a LOCK_MAC=${LOCK_MAC:="0"}
cfg -a LOCK_MAC_2=${LOCK_MAC_2:="0"}




##
## Export the variables again to catch the defaults
##

#Daniel Add for setting SSID with backquote and backslash. 2013-12-04
#cfg -e > /tmp/vars.$$
cfg -e |grep -v AP_SSID >/tmp/vars.$$
my_vaps="'' _2 _3 _4 _5 _6 _7 _8 _9 _10 _11 _12 _13 _14 _15 _16"
for i in $my_vaps;
	do
		if [ "${i}" = "''" ]; then
			i=""
		fi
		ITER_SSID="AP_SSID$i"
		var2=$(cfg -v $ITER_SSID|sed 's/\\/\\\\/g'|sed 's/`/\\`/g'|sed 's/\"/\\\"/g')
		if [ "${i}" = "''" ]; then
			i=""
			echo "export AP_SSID=\"$var2\"" >> /tmp/vars.$$
		else
			echo "export AP_SSID$i=\"$var2\"" >>/tmp/vars.$$	
		fi
	done
. /tmp/vars.$$
rm /tmp/vars.$$

##
## Set the proper radio parameter values depending on the
## interface selected.  These are exported vice included
## in cache. These should really be in apup vice here,
## but this works OK.
##

for i in $my_vaps;
do
    if [ "${i}" = "''" ]; then
        i=""
fi
    ITER_RADIO_ID="AP_RADIO_ID$i"
    ITER_RFPARAM="AP_RFPARAM$i"
    eval ITER_RADIO_ID=\$$ITER_RADIO_ID
    if [ "${ITER_RADIO_ID}" = "1" ]; then
        export $ITER_RFPARAM=RF:$AP_PRIMARY_CH_2:$AP_CHMODE_2
else
        export $ITER_RFPARAM=RF:$AP_PRIMARY_CH:$AP_CHMODE
fi
done

#####################################################################################
## The following parameters are board specific, and should not be modified
#####################################################################################

export ATH_use_eeprom=0
# SET it to 1 if no "A" band support 
# export AP_NO_A_BAND=1


