Index: net-snmp-5.7.2/agent/mibgroup/mibII/system_mib.c
===================================================================
--- net-snmp-5.7.2.orig/agent/mibgroup/mibII/system_mib.c	2013-12-18 13:42:04.333204926 +0800
+++ net-snmp-5.7.2/agent/mibgroup/mibII/system_mib.c	2013-12-18 13:42:31.032725256 +0800
@@ -28,7 +28,15 @@
 #include <strings.h>
 #endif
 #include <sys/types.h>
+#if HAVE_WINSOCK_H
+#include <winsock.h>
+#endif
+
+#ifdef HAVE_SYS_TIME_H
+#include <sys/time.h>
+#endif
 
+#include <ctype.h>
 #if HAVE_UTSNAME_H
 #include <utsname.h>
 #else
@@ -36,14 +44,22 @@
 #include <sys/utsname.h>
 #endif
 #endif
+#if HAVE_NETINET_IN_H
+#include <netinet/in.h>
+#endif
 
 #include <net-snmp/net-snmp-includes.h>
 #include <net-snmp/agent/net-snmp-agent-includes.h>
+#include    <nvram.h>
+#include    <nvram_rule.h>
 #include <net-snmp/agent/sysORTable.h>
 
 #include "util_funcs.h"
 #include "system_mib.h"
 #include "updates.h"
+#include "struct.h"
+#include "sysORTable.h"
+
 
 netsnmp_feature_require(watcher_read_only_int_scalar)
 
@@ -55,7 +71,7 @@
 	 *********************/
 
 #define SYS_STRING_LEN	256
-static char     version_descr[SYS_STRING_LEN] = NETSNMP_VERS_DESC;
+ char     version_descr[SYS_STRING_LEN] = NETSNMP_VERS_DESC;
 static char     sysContact[SYS_STRING_LEN] = NETSNMP_SYS_CONTACT;
 static char     sysName[SYS_STRING_LEN] = NETSNMP_SYS_NAME;
 static char     sysLocation[SYS_STRING_LEN] = NETSNMP_SYS_LOC;
@@ -65,6 +81,14 @@
 extern oid      version_sysoid[];
 extern int      version_sysoid_len;
 
+char            oldversion_descr[SYS_STRING_LEN];
+char            oldsysContact[SYS_STRING_LEN];
+char            oldsysName[SYS_STRING_LEN];
+char            oldsysLocation[SYS_STRING_LEN];
+
+char		     node_name[SYS_STRING_LEN];
+char		     get_value[SYS_STRING_LEN];
+char 	     set_value[SYS_STRING_LEN];
 static int      sysServices = 72;
 static int      sysServicesConfiged = 0;
 
@@ -72,6 +96,7 @@
 extern int      version_id_len;
 
 static int      sysContactSet = 0, sysLocationSet = 0, sysNameSet = 0;
+WriteMethod     writeSystem;
 
 #if (defined (WIN32) && defined (HAVE_WIN32_PLATFORM_SDK)) || defined (mingw32)
 static void     windowsOSVersionString(char [], size_t);
@@ -136,7 +161,7 @@
     system_parse_config_string2(token, cptr, version_descr,
                                 sizeof(version_descr));
 }
-
+/*
 static void
 system_parse_config_sysloc(const char *token, char *cptr)
 {
@@ -157,6 +182,147 @@
     system_parse_config_string(token, cptr, "sysName", sysName,
                                sizeof(sysName), &sysNameSet);
 }
+*/
+void
+system_parse_config_sysloc(const char *token, char *cptr)
+{
+	char			tmpbuf[1024];
+
+	if (strlen(cptr) >= sizeof(sysLocation)) {
+		snprintf(tmpbuf, 1024,
+				 "syslocation token too long (must be < %lu):\n\t%s",
+				 (unsigned long)sizeof(sysLocation), cptr);
+		config_perror(tmpbuf);
+	}
+
+	if (strcmp(token, "psyslocation") == 0) {
+		if (sysLocationSet < 0) {
+			/*
+			 * This is bogus (and shouldn't happen anyway) -- the sysLocation
+			 * is already configured read-only.  
+			 */
+			snmp_log(LOG_WARNING,
+					 "ignoring attempted override of read-only sysLocation.0\n");
+			return;
+		} else {
+			sysLocationSet++;
+		}
+	} else {
+		if (sysLocationSet > 0) {
+			/*
+			 * This is bogus (and shouldn't happen anyway) -- we already read a
+			 * persistent value of sysLocation, which we should ignore in
+			 * favour of this one.	
+			 */
+			snmp_log(LOG_WARNING,
+					 "ignoring attempted override of read-only sysLocation.0\n");
+			/*
+			 * Fall through and copy in this value.  
+			 */
+		}
+		sysLocationSet = -1;
+	}
+
+	if (strcmp(cptr, "\"\"") == 0) {
+		sysLocation[0] = '\0';
+	} else if (strlen(cptr) < sizeof(sysLocation)) {
+		strcpy(sysLocation, cptr);
+	}
+}
+
+void
+system_parse_config_syscon(const char *token, char *cptr)
+{
+	char			tmpbuf[1024];
+
+	if (strlen(cptr) >= sizeof(sysContact)) {
+		snprintf(tmpbuf, 1024,
+				 "syscontact token too long (must be < %lu):\n\t%s",
+				 (unsigned long)sizeof(sysContact), cptr);
+		config_perror(tmpbuf);
+	}
+
+	if (strcmp(token, "psyscontact") == 0) {
+		if (sysContactSet < 0) {
+			/*
+			 * This is bogus (and shouldn't happen anyway) -- the sysContact
+			 * is already configured read-only.  
+			 */
+			snmp_log(LOG_WARNING,
+					 "ignoring attempted override of read-only sysContact.0\n");
+			return;
+		} else {
+			sysContactSet++;
+		}
+	} else {
+		if (sysContactSet > 0) {
+			/*
+			 * This is bogus (and shouldn't happen anyway) -- we already read a
+			 * persistent value of sysContact, which we should ignore in favour
+			 * of this one.  
+			 */
+			snmp_log(LOG_WARNING,
+					 "ignoring attempted override of read-only sysContact.0\n");
+			/*
+			 * Fall through and copy in this value.  
+			 */
+		}
+		sysContactSet = -1;
+	}
+
+	if (strcmp(cptr, "\"\"") == 0) {
+		sysContact[0] = '\0';
+	} else if (strlen(cptr) < sizeof(sysContact)) {
+		strcpy(sysContact, cptr);
+	}
+}
+
+void
+system_parse_config_sysname(const char *token, char *cptr)
+{
+	char			tmpbuf[1024];
+
+	if (strlen(cptr) >= sizeof(sysName)) {
+		snprintf(tmpbuf, 1024,
+				 "sysname token too long (must be < %lu):\n\t%s",
+				 (unsigned long)sizeof(sysName), cptr);
+		config_perror(tmpbuf);
+	}
+
+	if (strcmp(token, "psysname") == 0) {
+		if (sysNameSet < 0) {
+			/*
+			 * This is bogus (and shouldn't happen anyway) -- the sysName
+			 * is already configured read-only.  
+			 */
+			snmp_log(LOG_WARNING,
+					 "ignoring attempted override of read-only sysName.0\n");
+			return;
+		} else {
+			sysNameSet++;
+		}
+	} else {
+		if (sysNameSet > 0) {
+			/*
+			 * This is bogus (and shouldn't happen anyway) -- we already read a
+			 * persistent value of sysName, which we should ignore in favour
+			 * of this one.  
+			 */
+			snmp_log(LOG_WARNING,
+					 "ignoring attempted override of read-only sysName.0\n");
+			/*
+			 * Fall through and copy in this value.  
+			 */
+		}
+		sysNameSet = -1;
+	}
+
+	if (strcmp(cptr, "\"\"") == 0) {
+		sysName[0] = '\0';
+	} else if (strlen(cptr) < sizeof(sysName)) {
+		strcpy(sysName, cptr);
+	}
+}
 
 static void
 system_parse_config_sysServices(const char *token, char *cptr)
@@ -186,6 +352,165 @@
 	 *
 	 *********************/
 
+/*
+ * define the structure we're going to ask the agent to register our
+ * information at 
+ */
+struct variable1 system_variables[] = {
+    {VERSION_DESCR, ASN_OCTET_STR, RONLY, var_system, 1, {1}},
+    {VERSIONID, ASN_OBJECT_ID, RONLY, var_system, 1, {2}},
+    {UPTIME, ASN_TIMETICKS, RONLY, var_system, 1, {3}},
+    {SYSCONTACT, ASN_OCTET_STR, RWRITE, var_system, 1, {4}},
+    {SYSTEMNAME, ASN_OCTET_STR, RWRITE, var_system, 1, {5}},
+    {SYSLOCATION, ASN_OCTET_STR, RWRITE, var_system, 1, {6}},
+    {SYSSERVICES, ASN_INTEGER, RONLY, var_system, 1, {7}},
+    {SYSORLASTCHANGE, ASN_TIMETICKS, RONLY, var_system, 1, {8}}
+};
+
+struct config_operations system_oper[] = {
+    {VERSION_DESCR, NULL,get_config_hdlr},
+    {VERSIONID, NULL,get_config_hdlr},
+    {UPTIME, NULL,get_uptime_hdlr},
+    {SYSCONTACT,set_config_hdlr,get_config_hdlr},
+    {SYSTEMNAME,set_host_name,get_host_name},
+    {SYSLOCATION,set_config_hdlr,get_config_hdlr},
+    {SYSSERVICES, NULL,get_config_hdlr},
+    {SYSORLASTCHANGE, NULL,get_config_hdlr}
+};
+
+void 
+set_config_hdlr (char *setName,char * setValue){
+	config_set(setName,setValue);
+}
+void 
+get_config_hdlr (char *getName, char * getValue){
+	config_get(getName,getValue);
+}
+
+void 
+set_host_name (char *setName,char * setValue){	
+	char		buf_b[1024];
+	
+	config_set(setName,setValue);
+ 	sprintf(buf_b,"echo %s >/proc/sys/kernel/hostname",setValue);
+     	system(buf_b);
+}
+
+void 
+get_host_name (char *getName,char * getValue){
+	FILE *fp;
+	char 	buffer[1024];
+	
+	//config_set(getName,getValue);
+	fp = popen("uname -n", "r");
+	while(!feof(fp))
+	{
+		fgets(buffer,sizeof(buffer),fp);
+	}
+	pclose(fp);
+	strcpy(getValue,buffer);
+}
+
+get_uptime_hdlr(char *getName,char *getValue){
+	/*sprintf(buf_d,"echo sysName=%s>>/tmp/debug",value);
+	system(buf_d);*/
+	config_get(getName,getValue);
+}
+void
+config_nvram_get(char *name,char *value){
+	char buf[64];
+	char buf_a[64];
+	FILE *fp;
+
+	memset(buf, 0, sizeof(buf));
+	memset(buf_a, 0, sizeof(buf_a));
+	sprintf(buf_a,"nvram get %s",name);
+	if((fp = popen(buf_a,"r")) == NULL)
+		goto error;
+
+	if(!fgets(buf, sizeof(buf), fp)){
+		pclose(fp);
+		goto error;
+	}
+
+	if(!strlen(buf)){
+		pclose(fp);
+		goto error;
+	}
+	pclose(fp);
+	strcpy(value,buf);
+error:
+	fprintf(stderr, "warning, cant find get name!\n");
+}
+
+void
+config_nvram_set(char *name,char *value){
+	nvram_set(name,value);
+    system("nvram commit");
+}
+
+void
+write_to_config(char name,char *value){
+	int i =0;
+	char sys_var[32];
+	int nodeId = 0;
+	
+	while(system_oper[i].sys_name){
+		if(name == (char)system_oper[i].sys_name){
+			nodeId = i;
+			break;
+		}
+		i++;
+	}
+	switch(name){
+	    case SYSCONTACT:
+		 strcpy(sys_var,"psyscontact");
+	        break;
+	    case SYSTEMNAME:
+		 strcpy(sys_var,"hostname");
+	        break;
+	    case SYSLOCATION:
+		 strcpy(sys_var,"psyslocation");
+	        break;
+	    default:
+	        return SNMP_ERR_GENERR;
+	}
+	system_oper[nodeId].setcb(sys_var,value);
+}
+
+void
+get_from_config(char name,char *value){
+	int i =0;
+	char sys_var[32];
+	int nodeId = 0;
+	
+	while(system_oper[i].sys_name){
+		if(name == (char)system_oper[i].sys_name){
+			nodeId = i;
+			break;
+		}
+		i++;
+	}
+	switch(name){
+	    case SYSCONTACT:
+		 strcpy(sys_var,"psyscontact");
+	        break;
+	    case SYSTEMNAME:
+		 strcpy(sys_var,"hostname");
+	        break;
+	    case SYSLOCATION:
+		strcpy(sys_var,"psyslocation");
+	        break;
+	    default:
+	        return SNMP_ERR_GENERR;
+	}
+	system_oper[nodeId].getcb(sys_var,value);
+}
+/*
+ * Define the OID pointer to the top of the mib tree that we're
+ * registering underneath 
+ */
+oid             system_variables_oid[] = { SNMP_OID_MIB2, 1 };
 oid             system_module_oid[] = { SNMP_OID_SNMPMODULES, 1 };
 int             system_module_oid_len = OID_LENGTH(system_module_oid);
 int             system_module_count = 0;
@@ -320,108 +645,13 @@
     memcpy(sysObjectID, version_sysoid, version_sysoid_len * sizeof(oid));
     sysObjectIDByteLength = version_sysoid_len * sizeof(oid);
 
-    {
-        const oid sysDescr_oid[] = { 1, 3, 6, 1, 2, 1, 1, 1 };
-        static netsnmp_watcher_info sysDescr_winfo;
-        netsnmp_register_watched_scalar(
-            netsnmp_create_handler_registration(
-                "mibII/sysDescr", NULL, sysDescr_oid, OID_LENGTH(sysDescr_oid),
-                HANDLER_CAN_RONLY),
-            netsnmp_init_watcher_info(&sysDescr_winfo, version_descr, 0,
-				      ASN_OCTET_STR, WATCHER_SIZE_STRLEN));
-    }
-    {
-        const oid sysObjectID_oid[] = { 1, 3, 6, 1, 2, 1, 1, 2 };
-        static netsnmp_watcher_info sysObjectID_winfo;
-        netsnmp_register_watched_scalar(
-            netsnmp_create_handler_registration(
-                "mibII/sysObjectID", NULL,
-                sysObjectID_oid, OID_LENGTH(sysObjectID_oid),
-                HANDLER_CAN_RONLY),
-            netsnmp_init_watcher_info6(
-		&sysObjectID_winfo, sysObjectID, 0, ASN_OBJECT_ID,
-                WATCHER_MAX_SIZE | WATCHER_SIZE_IS_PTR,
-                MAX_OID_LEN, &sysObjectIDByteLength));
-    }
-    {
-        const oid sysUpTime_oid[] = { 1, 3, 6, 1, 2, 1, 1, 3 };
-        netsnmp_register_scalar(
-            netsnmp_create_handler_registration(
-                "mibII/sysUpTime", handle_sysUpTime,
-                sysUpTime_oid, OID_LENGTH(sysUpTime_oid),
-                HANDLER_CAN_RONLY));
-    }
-    {
-        const oid sysContact_oid[] = { 1, 3, 6, 1, 2, 1, 1, 4 };
-        static netsnmp_watcher_info sysContact_winfo;
-#ifndef NETSNMP_NO_WRITE_SUPPORT
-        netsnmp_register_watched_scalar(
-            netsnmp_create_update_handler_registration(
-                "mibII/sysContact", sysContact_oid, OID_LENGTH(sysContact_oid), 
-                HANDLER_CAN_RWRITE, &sysContactSet),
-            netsnmp_init_watcher_info(
-                &sysContact_winfo, sysContact, SYS_STRING_LEN - 1,
-                ASN_OCTET_STR, WATCHER_MAX_SIZE | WATCHER_SIZE_STRLEN));
-#else  /* !NETSNMP_NO_WRITE_SUPPORT */
-        netsnmp_register_watched_scalar(
-            netsnmp_create_update_handler_registration(
-                "mibII/sysContact", sysContact_oid, OID_LENGTH(sysContact_oid),
-                HANDLER_CAN_RONLY, &sysContactSet),
-            netsnmp_init_watcher_info(
-                &sysContact_winfo, sysContact, SYS_STRING_LEN - 1,
-                ASN_OCTET_STR, WATCHER_MAX_SIZE | WATCHER_SIZE_STRLEN));
-#endif /* !NETSNMP_NO_WRITE_SUPPORT */
-    }
-    {
-        const oid sysName_oid[] = { 1, 3, 6, 1, 2, 1, 1, 5 };
-        static netsnmp_watcher_info sysName_winfo;
-#ifndef NETSNMP_NO_WRITE_SUPPORT
-        netsnmp_register_watched_scalar(
-            netsnmp_create_update_handler_registration(
-                "mibII/sysName", sysName_oid, OID_LENGTH(sysName_oid),
-                HANDLER_CAN_RWRITE, &sysNameSet),
-            netsnmp_init_watcher_info(
-                &sysName_winfo, sysName, SYS_STRING_LEN - 1, ASN_OCTET_STR,
-                WATCHER_MAX_SIZE | WATCHER_SIZE_STRLEN));
-#else  /* !NETSNMP_NO_WRITE_SUPPORT */
-        netsnmp_register_watched_scalar(
-            netsnmp_create_update_handler_registration(
-                "mibII/sysName", sysName_oid, OID_LENGTH(sysName_oid),
-                HANDLER_CAN_RONLY, &sysNameSet),
-            netsnmp_init_watcher_info(
-                &sysName_winfo, sysName, SYS_STRING_LEN - 1, ASN_OCTET_STR,
-                WATCHER_MAX_SIZE | WATCHER_SIZE_STRLEN));
-#endif /* !NETSNMP_NO_WRITE_SUPPORT */
-    }
-    {
-        const oid sysLocation_oid[] = { 1, 3, 6, 1, 2, 1, 1, 6 };
-        static netsnmp_watcher_info sysLocation_winfo;
-#ifndef NETSNMP_NO_WRITE_SUPPORT
-        netsnmp_register_watched_scalar(
-            netsnmp_create_update_handler_registration(
-                "mibII/sysLocation", sysLocation_oid,
-                OID_LENGTH(sysLocation_oid),
-                HANDLER_CAN_RWRITE, &sysLocationSet),
-            netsnmp_init_watcher_info(
-		&sysLocation_winfo, sysLocation, SYS_STRING_LEN - 1,
-		ASN_OCTET_STR, WATCHER_MAX_SIZE | WATCHER_SIZE_STRLEN));
-#else  /* !NETSNMP_NO_WRITE_SUPPORT */
-        netsnmp_register_watched_scalar(
-            netsnmp_create_update_handler_registration(
-                "mibII/sysLocation", sysLocation_oid,
-                OID_LENGTH(sysLocation_oid),
-                HANDLER_CAN_RONLY, &sysLocationSet),
-            netsnmp_init_watcher_info(
-		&sysLocation_winfo, sysLocation, SYS_STRING_LEN - 1,
-		ASN_OCTET_STR, WATCHER_MAX_SIZE | WATCHER_SIZE_STRLEN));
-#endif /* !NETSNMP_NO_WRITE_SUPPORT */
-    }
-    {
-        const oid sysServices_oid[] = { 1, 3, 6, 1, 2, 1, 1, 7 };
-        netsnmp_register_read_only_int_scalar(
-            "mibII/sysServices", sysServices_oid, OID_LENGTH(sysServices_oid),
-            &sysServices, handle_sysServices);
-    }
+    /*
+     * register ourselves with the agent to handle our mib tree 
+     */
+    REGISTER_MIB("mibII/system", system_variables, variable1,
+                 system_variables_oid);
+    
+
     if (++system_module_count == 3)
         REGISTER_SYSOR_ENTRY(system_module_oid,
                              "The MIB module for SNMPv2 entities");
@@ -455,8 +685,192 @@
                                   "OID");
     snmp_register_callback(SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA,
                            system_store, NULL);
+
 }
 
+
+        /*********************
+	 *
+	 *  System specific implementation functions
+	 *
+	 *********************/
+
+#ifdef USING_MIBII_SYSORTABLE_MODULE
+//extern struct timeval sysOR_lastchange;
+#endif
+
+u_char         *
+var_system(struct variable *vp,
+           oid * name,
+           size_t * length,
+           int exact, size_t * var_len, WriteMethod ** write_method)
+{
+    static u_long   ulret;
+	
+    if (header_generic(vp, name, length, exact, var_len, write_method) ==
+        MATCH_FAILED)
+        return NULL;
+
+    switch (vp->magic) {
+    case VERSION_DESCR:
+        *var_len = strlen(version_descr);
+        return (u_char *) version_descr;
+    case VERSIONID:
+     //   *var_len = sysObjectIDLength * sizeof(sysObjectID[0]);
+        return (u_char *)sysObjectID;
+    case UPTIME:
+        ulret = netsnmp_get_agent_uptime();
+        return ((u_char *) & ulret);
+    case SYSCONTACT:
+	  	get_from_config(vp->magic,sysContact);
+        *var_len = strlen(sysContact);
+        *write_method = writeSystem;
+        return (u_char *) sysContact;
+    case SYSTEMNAME:
+	  	get_from_config(vp->magic,sysName);
+        *var_len = strlen(sysName);
+        *write_method = writeSystem;
+        return (u_char *) sysName;
+    case SYSLOCATION:
+	  	get_from_config(vp->magic,sysLocation);
+        *var_len = strlen(sysLocation);
+        *write_method = writeSystem;
+        return (u_char *) sysLocation;
+    case SYSSERVICES:
+#if NETSNMP_NO_DUMMY_VALUES
+        if (!sysServicesConfiged)
+            return NULL;
+#endif
+        long_return = sysServices;
+        return (u_char *) & long_return;
+
+#ifdef USING_MIBII_SYSORTABLE_MODULE
+    case SYSORLASTCHANGE:
+ //       ulret = netsnmp_timeval_uptime(&sysOR_lastchange);
+        return ((u_char *) & ulret);
+#endif
+
+    default:
+        DEBUGMSGTL(("snmpd", "unknown sub-id %d in var_system\n",
+                    vp->magic));
+    }
+    return NULL;
+}
+
+
+
+int
+writeSystem(int action,
+            u_char * var_val,
+            u_char var_val_type,
+            size_t var_val_len,
+            u_char * statP, oid * name, size_t name_len)
+{
+    u_char         *cp;
+    char           *buf = NULL, *oldbuf = NULL;
+    int             count, *setvar = NULL;
+    
+	switch ((char) name[7]) {
+    case VERSION_DESCR:
+    case VERSIONID:
+    case UPTIME:
+        snmp_log(LOG_ERR, "Attempt to write to R/O OID\n");
+        return SNMP_ERR_NOTWRITABLE;
+    case SYSCONTACT:
+        buf = sysContact;
+        oldbuf = oldsysContact;
+        setvar = &sysContactSet;
+        break;
+    case SYSTEMNAME:
+        buf = sysName;
+        oldbuf = oldsysName;
+        setvar = &sysNameSet;
+        break;
+    case SYSLOCATION:
+        buf = sysLocation;
+        oldbuf = oldsysLocation;
+        setvar = &sysLocationSet;
+        break;
+    case SYSSERVICES:
+    case SYSORLASTCHANGE:
+        snmp_log(LOG_ERR, "Attempt to write to R/O OID\n");
+        return SNMP_ERR_NOTWRITABLE;
+    default:
+        return SNMP_ERR_GENERR; /* ??? */
+    }
+
+    switch (action) {
+    case RESERVE1:             /* Check values for acceptability */
+        if (var_val_type != ASN_OCTET_STR) {
+            snmp_log(LOG_ERR, "not string\n");
+            return SNMP_ERR_WRONGTYPE;
+        }
+        if (var_val_len > sizeof(sysLocation) - 1) {
+            snmp_log(LOG_ERR, "bad length\n");
+            return SNMP_ERR_WRONGLENGTH;
+        }
+
+        for (cp = var_val, count = 0; count < (int) var_val_len;
+             count++, cp++) {
+            if (!isprint(*cp)) {
+                snmp_log(LOG_ERR, "not print %x\n", *cp);
+                return SNMP_ERR_WRONGVALUE;
+            }
+        }
+        if (setvar != NULL && *setvar < 0) {
+            /*
+             * The object is set in a read-only configuration file.  
+             */
+            return SNMP_ERR_NOTWRITABLE;
+        }
+        break;
+
+    case RESERVE2:             /* Allocate memory and similar resources */
+
+        /*
+         * Using static strings, so nothing needs to be done 
+         */
+        break;
+
+    case ACTION:               /* Perform the SET action (if reversible) */
+
+        /*
+         * Save the old value, in case of UNDO 
+         */
+        strcpy(oldbuf, buf);
+        memcpy(buf, var_val, var_val_len);
+        buf[var_val_len] = 0;
+        break;
+
+    case UNDO:                 /* Reverse the SET action and free resources */
+
+        strcpy(buf, oldbuf);
+        oldbuf[0] = 0;
+        break;
+
+    case COMMIT:
+        if (setvar != NULL) {
+            *setvar = 1;
+        }
+
+		write_to_config((char)name[7],buf);
+        snmp_save_persistent(netsnmp_ds_get_string(NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE));
+        (void) snmp_call_callbacks(SNMP_CALLBACK_LIBRARY,
+                                   SNMP_CALLBACK_STORE_DATA, NULL);
+        snmp_clean_persistent(netsnmp_ds_get_string
+                              (NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE));
+
+    case FREE:                 /* Free any resources allocated */
+
+        /*
+         * No resources have been allocated, but "empty" the 'oldbuf' 
+         */
+        oldbuf[0] = 0;
+        break;
+    }
+    return SNMP_ERR_NOERROR;
+}                               /* end of writeSystem */
+
         /*********************
 	 *
 	 *  Internal implementation functions - None
Index: net-snmp-5.7.2/agent/mibgroup/mibII/system_mib.h
===================================================================
--- net-snmp-5.7.2.orig/agent/mibgroup/mibII/system_mib.h	2013-12-18 13:42:04.349206272 +0800
+++ net-snmp-5.7.2/agent/mibgroup/mibII/system_mib.h	2013-12-18 13:42:31.032725256 +0800
@@ -4,7 +4,12 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
-
+struct config_operations
+{
+	char sys_name;
+	void (*setcb)( char *node_id, char * value);
+	void (*getcb)( char *node_id, char * value);
+};
 config_require(util_funcs mibII/updates)
 
 void init_system_mib(void);
@@ -12,5 +17,42 @@
 #ifdef __cplusplus
 }
 #endif
+extern char     version_descr[];
+extern FindVarMethod var_system;
+
+static void system_parse_config_string2(const char *token, char *cptr,
+                            char* value, size_t size);
+static void system_parse_config_string(const char *token, char *cptr,
+                           const char *name, char* value, size_t size,
+                           int* guard);
+static void system_parse_config_sysloc(const char *token, char *cptr);
+static void system_parse_config_syscon(const char *token, char *cptr);
+static void system_parse_config_sysname(const char *token, char *cptr);
+
+/*
+ * write or get value nvram
+ */
+void	get_config_hdlr(char * getName, char * getValue);
+void	set_config_hdlr(char * setName, char * setValue);
+void	get_uptime_hdlr(char * getName, char * getValue);
+void	get_host_name(char *getName,char *getValue);
+void	set_host_name(char *setName,char *setValue);
+void	write_to_config(char name, char * value);
+void	get_from_config(char name, char * value);
+void	config_nvram_get(char * name, char * value);
+void	config_nvram_set(char * name, char * value);
+
+
+#define config_get(name,value)  config_nvram_get(name,value)
+#define config_set(name,value)  config_nvram_set(name,value)
+
+#define	VERSION_DESCR		1
+#define	VERSIONID		2
+#define	UPTIME			3
+#define SYSCONTACT		4
+#define SYSTEMNAME		5
+#define SYSLOCATION		6
+#define SYSSERVICES		7
+#define SYSORLASTCHANGE		8
 
 #endif                          /* _MIBGROUP_SYSTEM_MIB_H */
