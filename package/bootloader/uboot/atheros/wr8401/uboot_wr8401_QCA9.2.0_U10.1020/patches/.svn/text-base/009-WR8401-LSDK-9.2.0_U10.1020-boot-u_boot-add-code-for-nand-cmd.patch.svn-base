--- boot_atheros/u-boot/common/cmd_nand.c	2013-04-03 13:43:14.000000000 +0800
+++ boot_liteon/u-boot/common/cmd_nand.c	2013-03-29 18:00:31.000000000 +0800
@@ -25,6 +25,7 @@
 #include <watchdog.h>
 #include <malloc.h>
 #include <asm/byteorder.h>
+#include <crc32.h>
 
 #ifdef CONFIG_SHOW_BOOT_PROGRESS
 # include <status_led.h>
@@ -36,14 +37,18 @@
 #include <jffs2/jffs2.h>
 #include <nand.h>
 
-extern nand_info_t nand_info[];       /* info for NAND chips */
 
-static int nand_dump_oob(nand_info_t *nand, ulong off)
+struct head_info
 {
-	return 0;
-}
+  unsigned int size;
+  unsigned int offset;
+  unsigned int checksum;
+};
 
-static int nand_dump(nand_info_t *nand, ulong off)
+
+extern nand_info_t nand_info[];       /* info for NAND chips */
+
+static int nand_raw_dump(nand_info_t *nand, ulong off, int page)
 {
 	int i;
 	u_char *buf, *p;
@@ -63,10 +68,12 @@
 	printf("Page %08x dump:\n", off);
 	i = nand->oobblock >> 4; p = buf;
 	while (i--) {
-		printf( "\t%02x %02x %02x %02x %02x %02x %02x %02x"
-			"  %02x %02x %02x %02x %02x %02x %02x %02x\n",
-			p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7],
-			p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
+		if (page) {
+			printf( "\t%02x %02x %02x %02x %02x %02x %02x %02x"
+				"  %02x %02x %02x %02x %02x %02x %02x %02x\n",
+				p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7],
+				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
+		}
 		p += 16;
 	}
 	puts("OOB:\n");
@@ -81,6 +88,16 @@
 	return 0;
 }
 
+static int nand_dump_oob(nand_info_t *nand, ulong off)
+{
+	return nand_raw_dump(nand, off, 0);
+}
+
+static int nand_dump(nand_info_t *nand, ulong off)
+{
+	return nand_raw_dump(nand, off, 1);
+}
+
 /* ------------------------------------------------------------------------- */
 
 static void
@@ -225,7 +242,96 @@
 		return ret == 0 ? 1 : 0;
 
 	}
+         
 
+       	if (strncmp(cmd, "write",4) == 0) {
+
+            s = strchr(cmd, '.');
+	     if (s != NULL && (!strncmp(s, ".fullpage", 9))){       
+		if (argc != 3)
+			goto usage;
+                unsigned char data[2048+64]={0};
+                unsigned char head_data[256]={0};
+                unsigned char check_flag[4]={0};
+                unsigned int flag=0;
+                unsigned int len = 0;
+                unsigned int partition_num = 0;
+                unsigned int checksum=0xffffffff;
+                struct head_info  datbuf[10];
+                int i = 0;
+                unsigned char *tmp=head_data;
+	        
+                //read head of flash.bin.fullpage
+		addr = (int)simple_strtoul(argv[2], NULL, 16);
+                memcpy(head_data,(u_char *)addr,256);
+                //read the number of partition
+                 memcpy(&partition_num,tmp,4);
+                 printf("the number of partiton is %d!!!!!\n",partition_num);
+                if((partition_num >10) || (0 >=partition_num))
+                {
+                  printf("the number of partiton is %d!!!!!\n",partition_num);
+                  return 1;
+                }
+                //check flag
+                memcpy(check_flag,tmp+(12*partition_num+4),4);
+                if(strncmp(check_flag, "flag",4))
+                {
+                 printf("UNcheck flag!!!!!\n");
+                 goto usage;
+                }
+                
+                tmp +=4;
+                for(i=0;i<partition_num;i++)
+                {
+                 memcpy(&datbuf[i],tmp,sizeof(struct head_info));
+                 tmp +=sizeof(struct head_info);
+                }
+                addr +=256;
+
+                tmp =(u_char *)addr;
+                //checksum
+                init_crc_table();
+                for(i=0;i<partition_num;i++)
+                {
+                    checksum=0xffffffff;
+                    len=datbuf[i].size;
+                    while(len)
+                    {
+                     memcpy(data,tmp,2048+64);
+                     checksum = calc_buf_crc32(checksum,data,2048+64);
+                     len -=(2048+64);
+                     tmp = tmp + (2048+64);
+                    }
+                 
+                    if(checksum!=datbuf[i].checksum)
+                    {
+                      printf("partition %d checksum mismatch!\n",i+1);
+                      return 1;
+                    }
+                   
+                }
+
+                //write data to partition
+                nand->rw_oob = 1;
+                for(i=0;i<partition_num;i++)
+                {
+                   off=datbuf[i].offset;
+                   size=datbuf[i].size;
+		   printf("\nNAND %s: device %d partition:%d offset 0x%x, size %u  addr 0x%x... ","write.fullpage", nand_curr_device, i+1, off, size,addr);
+	           ret = nand_write(nand, (loff_t)off, &size, (u_char *)addr);
+                   ret=0;
+                   if(0!=ret)
+                   {
+                    printf(" %d bytes %s: %s\n", size,"write.fullpage", ret ? "ERROR" : "OK");
+                    return 1;
+                   }
+                   addr +=datbuf[i].size;
+	           printf(" %d bytes %s: %s\n", size,"write.fullpage", ret ? "ERROR" : "OK");
+                }
+	        nand->rw_oob = 0;
+                return  0;
+           }
+	}
 	/* read write */
 	if (strncmp(cmd, "read", 4) == 0 || strncmp(cmd, "write", 5) == 0) {
 		if (argc < 4)
@@ -245,6 +351,47 @@
 		if (off == 0 && size == 0)
 			return 1;
 
+#if defined(CONFIG_MTD_NAND_YAFFS2)
+		s = strchr(cmd, '.');
+		if (s != NULL && (!strncmp(s, ".yaffs2", 7)) && strstr(cmd, "write")){
+			nand->rw_oob = 1;
+			nand->skipfirstblk = 1;
+
+			printf("\nNAND %s: device %d offset 0x%x, size %u ... \n",
+			       i ? "read" : "write.yaffs2", nand_curr_device, off, size);
+
+			ret = nand_write(nand, (loff_t)off, &size, (u_char *)addr);
+			nand->skipfirstblk = 0;
+			nand->rw_oob = 0;
+			
+			printf(" %d bytes %s: %s\n", size,
+			       i ? "read" : "written", ret ? "ERROR" : "OK");
+			
+			return ret == 0 ? 0 : 1;
+		}
+#endif
+		s = strchr(cmd, '.');
+		if (s != NULL && (!strncmp(s, ".raw", 4))){
+			s = strstr(cmd, "write");	
+
+			printf("\nNAND %s: device %d offset 0x%x, size %u ... ",
+			       s ? "write.raw" : "read.raw", nand_curr_device, off, size);		
+
+			nand->rw_oob = 1;
+	
+			if (s)
+				ret = nand_write(nand, (loff_t)off, &size, (u_char *)addr);
+			else
+				ret = nand_read(nand, (loff_t)off, &size, (u_char *)addr);
+
+			nand->rw_oob = 0;
+
+			printf(" %d bytes %s: %s\n", size,
+			       s ? "write.raw" : "read.raw", ret ? "ERROR" : "OK");
+
+			return ret == 0 ? 0 : 1;	
+		}
+
 		i = strncmp(cmd, "read", 4) == 0;	/* 1 = read, 0 = write */
 		printf("\nNAND %s: device %d offset 0x%x, size %u ... ",
 		       i ? "read" : "write", nand_curr_device, off, size);
@@ -271,6 +418,13 @@
 	"nand read[.jffs2]     - addr off size\n"
 	"nand write[.jffs2]    - addr off size - read/write `size' bytes starting\n"
 	"    at offset `off' to/from memory address `addr'\n"
+#if defined(CONFIG_MTD_NAND_YAFFS2)
+	"nand write[.yaffs2] - addr off partition size - write `size' byte yaffs image\n"
+	"    starting at offset off' from memory address addr' (.yaffs2 for 512+16 NAND)\n"
+#endif
+	"nand read[.raw]      - addr off size\n"
+	"nand write[.raw] - addr off size -write `size' byte raw image\n"
+        "nand write[.fullpage] -addr\n"
 	"nand erase [clean] [off size] - erase `size' bytes from\n"
 	"    offset `off' (entire device if not specified)\n"
 	"nand bad - show bad blocks\n"
@@ -278,7 +432,7 @@
 	"nand scrub - really clean NAND erasing bad blocks (UNSAFE)\n"
 	"nand markbad off - mark bad block at offset (UNSAFE)\n"
 	"nand biterr off - make a bit error at offset (UNSAFE)\n");
-
+	
 int do_nandboot(cmd_tbl_t * cmdtp, int flag, int argc, char *argv[])
 {
 	char *boot_device = NULL;
