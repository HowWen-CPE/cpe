--- a/lib_mips/board.c
+++ b/lib_mips/board.c
@@ -34,6 +34,7 @@
 #include <nand_api.h>
 
 DECLARE_GLOBAL_DATA_PTR;
+#undef DEBUG
 
 #define SDRAM_CFG1_REG RALINK_SYSCTL_BASE + 0x0304
 
@@ -1288,6 +1289,9 @@ void board_init_r (gd_t *id, ulong dest_
 	int i;
 	int timer1= CONFIG_BOOTDELAY;
 	unsigned char BootType='3', confirm=0;
+	char *bootram,file[ARGV_LEN];
+	ulong choose=0;
+	unsigned char tmpType;
 	int my_tmp;
 	char addr_str[11];
 #if defined (CFG_ENV_IS_IN_FLASH)
@@ -1871,15 +1875,29 @@ void board_init_r (gd_t *id, ulong dest_
 	}
 			
 	OperationSelect();   
+	//Alvin add for boot from ram
+	bootram = getenv("ramboot");
+	if(bootram != NULL && strlen(bootram) == 1 && bootram[0]== '1')
+	{
+		BootType = '1';
+	}
+	}
+	//addd end
 	while (timer1 > 0) {
 		--timer1;
 		/* delay 100 * 10ms */
 		for (i=0; i<100; ++i) {
 			if ((my_tmp = tstc()) != 0) {	/* we got a key press	*/
 				timer1 = 0;	/* no more delay	*/
-				BootType = getc();
+				tmpType = getc();
+				if(0 != (int)tmpType)//process console not connect
+				{
+					BootType = tmpType;
+					choose = 1;
+				}
 				if ((BootType < '0' || BootType > '5') && (BootType != '7') && (BootType != '8') && (BootType != '9'))
 					BootType = '3';
+				
 				printf("\n\rYou choosed %c\n\n", BootType);
 				break;
 			}
@@ -1918,7 +1936,31 @@ void board_init_r (gd_t *id, ulong dest_
 		switch(BootType) {
 		case '1':
 			printf("   \n%d: System Load Linux to SDRAM via TFTP. \n", SEL_LOAD_LINUX_SDRAM);
-			tftp_config(SEL_LOAD_LINUX_SDRAM, argv);           
+			if(choose == 1)
+			{
+				tftp_config(SEL_LOAD_LINUX_SDRAM, argv); 
+			}
+			//Alvin add for boot from ram
+			else
+			{
+#if defined (RT2880_ASIC_BOARD) || defined (RT2880_FPGA_BOARD)
+				argv[1] = "0x8a800000";
+#else
+				argv[1] = "0x80A00000";
+#endif
+				s = getenv("bootfile");
+				memset(file, 0, ARGV_LEN);
+				if (s != NULL) {
+					memcpy(file, s, strlen(s));
+					copy_filename (argv[2], file, sizeof(file));
+				}
+				else
+				{
+					memcpy(file, "cpeimage.ram", strlen("cpeimage.ram"));
+					copy_filename (argv[2], file, sizeof(file));
+				}
+			}
+			//add end
 			argc= 3;
 			setenv("autostart", "yes");
 			do_tftpb(cmdtp, 0, argc, argv);
