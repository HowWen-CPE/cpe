#!/bin/sh -x
export PATH=/bin:/sbin:/usr/bin:/usr/sbin
[ $# = 0 ] && { echo "  $0 <group>"; exit; }
. /etc/functions.sh
. /etc/network.sh
iface=$1
type="${1%%[0-9]*}"
num="${1#$type}"
debug "### ifdown $iface ###"
LOCKFILE=/tmp/.iface.changestate.${iface}.lock

nvram replace attr wan_up_down_state_rule $num v4 0
if=$(nvram get ${iface}_ifname)
proto=$(nvram show ${iface}_proto 0 prev)

PPP_DEMAND_STATE_FILE="/tmp/ppp-${iface}-demand.tmp"
[ -f "${PPP_DEMAND_STATE_FILE}" ] && {
  # ifdown from a connected connection, set to "demand-force-down"
  [ "$(cat ${PPP_DEMAND_STATE_FILE})" = "demand-connected" ] && {
    echo -n "demand-force-down" > ${PPP_DEMAND_STATE_FILE}
  }
}

# Validate iface. XXX: ifdown might not need to validate the interfaces.
#if_valid $if || { 
#debug "### ifdown wrong interface $iface ###"
#exit 
#}

# Bring down the iface
case "$proto" in
	static) 
        # Because we have v4 and v6 ipaddress on the same device, we have to check
        # both in case of error turn other down
        [ "$(nvram show wan_up_down_state_rule $num v6)" = "0" ] && {
            $DEBUG ip -4 link set dev $if down
        }
        $DEBUG ip -4 addr flush dev $if
        if_serialize_lock "$LOCKFILE"
        iface_down $iface
        env -i ACTION="ifdown" INTERFACE="$iface" PROTO=static \
            TYPE="$type" NUM="$num" IFNAME="$if" /sbin/hotplug-call "iface" 
    ;;
    pptp|pppoe|wwan) 
        dhcpcd -k br-${iface}
        [ -n "$(pidof dhcpcdstart)" ] && {
        	#dhcpcd -k br-${iface}
        	kill -9 `pidof dhcpcdstart`
        }
        pidfile=/var/run/dhcpcd-br-${iface}.pid
        [ -r ${pidfile} ] && {
        	IFACE_PID=$(cat $pidfile 2>&-)
        	if_serialize_lock "$LOCKFILE" "$IFACE_PID"
        	[ -r ${pidfile} ] && {
        		IFACE_PID=$(cat ${pidfile} 2>&-)
        		kill $IFACE_PID 2>&-
        	}
        }
		#Ensure pptp completion down trigger event
        sleep 2
        killall ifup.$proto >&- 2>&-
        killall pppd
        # This triggers ip-down which unset NVRAM and generates an ifdown event.
        [ -r /var/run/${if}.pid ] && {
            IFACE_PID=$(cat /var/run/${if}.pid 2>&-)
            if_serialize_lock "$LOCKFILE" "$IFACE_PID"
            [ -r /var/run/${if}.pid ] && {
                IFACE_PID=$(cat /var/run/${if}.pid 2>&-)
                kill $IFACE_PID 2>&-
            }
            nvram replace attr wan_pptp_l2tp_rule 0 ipaddr "0.0.0.0" 
            nvram replace attr wan_pptp_l2tp_rule 0 netmask "0.0.0.0"    
            nvram replace attr wan_pptp_l2tp_rule 0 gateway "0.0.0.0" 
        }
    ;;
    l2tp)
        dhcpcd -k br-${iface}
        [ -n "$(pidof dhcpcdstart)" ] && {
           kill -9 `pidof dhcpcdstart`
        }
        pidfile=/var/run/dhcpcd-br-${iface}.pid
        [ -r ${pidfile} ] && {
           IFACE_PID=$(cat $pidfile 2>&-)
           if_serialize_lock "$LOCKFILE" "$IFACE_PID"
           [ -r ${pidfile} ] && {
             IFACE_PID=$(cat ${pidfile} 2>&-)
             kill -9 $IFACE_PID 2>&-
           }
        }
		#Ensure l2tp completion down trigger event
        sleep 2
        killall ifup.$proto >&- 2>&-
	    killall pppd
	    # This triggers ip-down which unset NVRAM and generates an ifdown event.
	    [ -r /var/run/xl2tpd/xl2tpd_client.pid ] && {
		  IFACE_PID=$(cat /var/run/xl2tpd/xl2tpd_client.pid 2>&-)
		  if_serialize_lock "$LOCKFILE" "$IFACE_PID"
		  kill -9 $IFACE_PID
	    }
            nvram replace attr wan_pptp_l2tp_rule 0 ipaddr "0.0.0.0" 
            nvram replace attr wan_pptp_l2tp_rule 0 netmask "0.0.0.0"    
            nvram replace attr wan_pptp_l2tp_rule 0 gateway "0.0.0.0" 
    ;;
    dhcp|htc)
        # This triggers deconfig state which unset NVRAM and generates an 
        # ifdown event.
		
		#send DHCP_RELEASE
        dhcpcd -k br-${iface}

		[ -n "$(pidof dhcpcdstart)" ] && {
			kill -9 `pidof dhcpcdstart`	
		}
		pidfile=/var/run/dhcpcd-br-${iface}.pid

        [ -r ${pidfile} ] && {
            IFACE_PID=$(cat $pidfile 2>&-)
            if_serialize_lock "$LOCKFILE" "$IFACE_PID"
            [ -r ${pidfile} ] && {
                IFACE_PID=$(cat ${pidfile} 2>&-)
                kill $IFACE_PID 2>&-
            }
        }
        iface_down $iface
		#Ensure DHCP completion down trigger event
		sleep 2
		# hotplug 
        #env -i ACTION="ifdown" INTERFACE="$iface" PROTO=dhcp \
        #    TYPE="$type" NUM="$num" IFNAME="$if" /sbin/hotplug-call "iface" &
    ;;
    directip)
        # This triggers deconfig state which unset NVRAM and generates an 
        # ifdown event.
        [ -r /var/run/${iface}.pid ] && {
            # Turn down interface usb0, or it would occupy the USB's end
            # points.
            IFACE_PID=$(cat /var/run/${iface}.pid 2>&-)
            if_serialize_lock "$LOCKFILE" "$IFACE_PID"
            [ -r /var/run/${iface}.pid ] && {
                # FIXME: Wait for udhcpc being terminated because of an unknown
                # reason that the interface $if will be brought up after bringing
                # down.
                # sleep 15
                # ifconfig $if down
                IFACE_PID=$(cat /var/run/${iface}.pid 2>&-)
                kill $IFACE_PID 2>&-
            }

        }
    ;;
esac

nvram replace attr ${iface}_proto 0 prev `nvram show ${iface}_proto 0 curr`
nvram commit


[ "$proto" = "static" ] || {
        iface_down $iface
}

