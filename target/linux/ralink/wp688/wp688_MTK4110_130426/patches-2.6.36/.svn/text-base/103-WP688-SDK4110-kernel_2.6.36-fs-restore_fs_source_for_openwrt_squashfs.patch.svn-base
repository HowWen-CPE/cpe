diff -Nur linux-2.6.36_builded_sdk_orig/fs/jffs2/compr.c linux-2.6.36/fs/jffs2/compr.c
--- linux-2.6.36_builded_sdk_orig/fs/jffs2/compr.c	2012-12-10 16:31:51.000000000 +0800
+++ linux-2.6.36/fs/jffs2/compr.c	2010-10-21 04:30:22.000000000 +0800
@@ -320,9 +320,6 @@
 #ifdef CONFIG_JFFS2_LZO
 	jffs2_lzo_init();
 #endif
-#ifdef CONFIG_JFFS2_LZMA
-        jffs2_lzma_init();
-#endif
 /* Setting default compression mode */
 #ifdef CONFIG_JFFS2_CMODE_NONE
 	jffs2_compression_mode = JFFS2_COMPR_MODE_NONE;
@@ -346,9 +343,6 @@
 int jffs2_compressors_exit(void)
 {
 /* Unregistering compressors */
-#ifdef CONFIG_JFFS2_LZMA
-        jffs2_lzma_exit();
-#endif
 #ifdef CONFIG_JFFS2_LZO
 	jffs2_lzo_exit();
 #endif
diff -Nur linux-2.6.36_builded_sdk_orig/fs/jffs2/compr.h linux-2.6.36/fs/jffs2/compr.h
--- linux-2.6.36_builded_sdk_orig/fs/jffs2/compr.h	2012-12-10 16:31:51.000000000 +0800
+++ linux-2.6.36/fs/jffs2/compr.h	2010-10-21 04:30:22.000000000 +0800
@@ -29,9 +29,9 @@
 #define JFFS2_DYNRUBIN_PRIORITY  20
 #define JFFS2_LZARI_PRIORITY     30
 #define JFFS2_RTIME_PRIORITY     50
-#define JFFS2_LZMA_PRIORITY      70
-#define JFFS2_ZLIB_PRIORITY      80
-#define JFFS2_LZO_PRIORITY       90
+#define JFFS2_ZLIB_PRIORITY      60
+#define JFFS2_LZO_PRIORITY       80
+
 
 #define JFFS2_RUBINMIPS_DISABLED /* RUBINs will be used only */
 #define JFFS2_DYNRUBIN_DISABLED  /*	   for decompression */
@@ -99,9 +99,5 @@
 int jffs2_lzo_init(void);
 void jffs2_lzo_exit(void);
 #endif
-#ifdef CONFIG_JFFS2_LZMA
-int jffs2_lzma_init(void);
-void jffs2_lzma_exit(void);
-#endif
 
 #endif /* __JFFS2_COMPR_H__ */
diff -Nur linux-2.6.36_builded_sdk_orig/fs/jffs2/compr_lzma.c linux-2.6.36/fs/jffs2/compr_lzma.c
--- linux-2.6.36_builded_sdk_orig/fs/jffs2/compr_lzma.c	2012-12-10 16:31:51.000000000 +0800
+++ linux-2.6.36/fs/jffs2/compr_lzma.c	1970-01-01 08:00:00.000000000 +0800
@@ -1,128 +0,0 @@
-/*
- * JFFS2 -- Journalling Flash File System, Version 2.
- *
- * For licensing information, see the file 'LICENCE' in this directory.
- *
- * JFFS2 wrapper to the LZMA C SDK
- *
- */
-
-#include <linux/lzma.h>
-#include "compr.h"
-
-#ifdef __KERNEL__
-	static DEFINE_MUTEX(deflate_mutex);
-#endif
-
-CLzmaEncHandle *p;
-Byte propsEncoded[LZMA_PROPS_SIZE];
-SizeT propsSize = sizeof(propsEncoded);
-
-STATIC void lzma_free_workspace(void)
-{
-	LzmaEnc_Destroy(p, &lzma_alloc, &lzma_alloc);
-}
-
-STATIC int INIT lzma_alloc_workspace(CLzmaEncProps *props)
-{
-	if ((p = (CLzmaEncHandle *)LzmaEnc_Create(&lzma_alloc)) == NULL)
-	{
-		PRINT_ERROR("Failed to allocate lzma deflate workspace\n");
-		return -ENOMEM;
-	}
-
-	if (LzmaEnc_SetProps(p, props) != SZ_OK)
-	{
-		lzma_free_workspace();
-		return -1;
-	}
-	
-	if (LzmaEnc_WriteProperties(p, propsEncoded, &propsSize) != SZ_OK)
-	{
-		lzma_free_workspace();
-		return -1;
-	}
-
-        return 0;
-}
-
-STATIC int jffs2_lzma_compress(unsigned char *data_in, unsigned char *cpage_out,
-			      uint32_t *sourcelen, uint32_t *dstlen, void *model)
-{
-	SizeT compress_size = (SizeT)(*dstlen);
-	int ret;
-
-	#ifdef __KERNEL__
-		mutex_lock(&deflate_mutex);
-	#endif
-
-	ret = LzmaEnc_MemEncode(p, cpage_out, &compress_size, data_in, *sourcelen,
-		0, NULL, &lzma_alloc, &lzma_alloc);
-
-	#ifdef __KERNEL__
-		mutex_unlock(&deflate_mutex);
-	#endif
-
-	if (ret != SZ_OK)
-		return -1;
-
-	*dstlen = (uint32_t)compress_size;
-
-	return 0;
-}
-
-STATIC int jffs2_lzma_decompress(unsigned char *data_in, unsigned char *cpage_out,
-				 uint32_t srclen, uint32_t destlen, void *model)
-{
-	int ret;
-	SizeT dl = (SizeT)destlen;
-	SizeT sl = (SizeT)srclen;
-	ELzmaStatus status;
-	
-	ret = LzmaDecode(cpage_out, &dl, data_in, &sl, propsEncoded,
-		propsSize, LZMA_FINISH_ANY, &status, &lzma_alloc);
-
-	if (ret != SZ_OK || status == LZMA_STATUS_NOT_FINISHED || dl != (SizeT)destlen)
-		return -1;
-
-	return 0;
-}
-
-static struct jffs2_compressor jffs2_lzma_comp = {
-	.priority = JFFS2_LZMA_PRIORITY,
-	.name = "lzma",
-	.compr = JFFS2_COMPR_LZMA,
-	.compress = &jffs2_lzma_compress,
-	.decompress = &jffs2_lzma_decompress,
-	.disabled = 0,
-};
-
-int INIT jffs2_lzma_init(void)
-{
-        int ret;
-	CLzmaEncProps props;
-	LzmaEncProps_Init(&props);
-
-        props.dictSize = LZMA_BEST_DICT(0x2000);
-        props.level = LZMA_BEST_LEVEL;
-        props.lc = LZMA_BEST_LC;
-        props.lp = LZMA_BEST_LP;
-        props.pb = LZMA_BEST_PB;
-        props.fb = LZMA_BEST_FB;
-
-	ret = lzma_alloc_workspace(&props);
-        if (ret < 0)
-                return ret;
-
-	ret = jffs2_register_compressor(&jffs2_lzma_comp);
-	if (ret)
-		lzma_free_workspace();
-	
-        return ret;
-}
-
-void jffs2_lzma_exit(void)
-{
-	jffs2_unregister_compressor(&jffs2_lzma_comp);
-	lzma_free_workspace();
-}
diff -Nur linux-2.6.36_builded_sdk_orig/fs/jffs2/Kconfig linux-2.6.36/fs/jffs2/Kconfig
--- linux-2.6.36_builded_sdk_orig/fs/jffs2/Kconfig	2012-12-10 16:31:51.000000000 +0800
+++ linux-2.6.36/fs/jffs2/Kconfig	2010-10-21 04:30:22.000000000 +0800
@@ -139,15 +139,6 @@
 	  This feature was added in July, 2007. Say 'N' if you need
 	  compatibility with older bootloaders or kernels.
 
-config JFFS2_LZMA
-	bool "JFFS2 LZMA compression support" if JFFS2_COMPRESSION_OPTIONS
-	select LZMA_COMPRESS
-	select LZMA_DECOMPRESS
-	depends on JFFS2_FS
-	default n
-	help
-	  JFFS2 wrapper to the LZMA C SDK
-
 config JFFS2_RTIME
 	bool "JFFS2 RTIME compression support" if JFFS2_COMPRESSION_OPTIONS
 	depends on JFFS2_FS
diff -Nur linux-2.6.36_builded_sdk_orig/fs/jffs2/Makefile linux-2.6.36/fs/jffs2/Makefile
--- linux-2.6.36_builded_sdk_orig/fs/jffs2/Makefile	2012-12-10 16:31:51.000000000 +0800
+++ linux-2.6.36/fs/jffs2/Makefile	2010-10-21 04:30:22.000000000 +0800
@@ -18,7 +18,4 @@
 jffs2-$(CONFIG_JFFS2_RTIME)	+= compr_rtime.o
 jffs2-$(CONFIG_JFFS2_ZLIB)	+= compr_zlib.o
 jffs2-$(CONFIG_JFFS2_LZO)	+= compr_lzo.o
-jffs2-$(CONFIG_JFFS2_LZMA)      += compr_lzma.o
 jffs2-$(CONFIG_JFFS2_SUMMARY)   += summary.o
-
-CFLAGS_compr_lzma.o += -Iinclude/linux -Ilib/lzma
diff -Nur linux-2.6.36_builded_sdk_orig/fs/jffs2/super.c linux-2.6.36/fs/jffs2/super.c
--- linux-2.6.36_builded_sdk_orig/fs/jffs2/super.c	2012-12-10 16:31:51.000000000 +0800
+++ linux-2.6.36/fs/jffs2/super.c	2010-10-21 04:30:22.000000000 +0800
@@ -252,41 +252,14 @@
 	BUILD_BUG_ON(sizeof(struct jffs2_raw_inode) != 68);
 	BUILD_BUG_ON(sizeof(struct jffs2_raw_summary) != 32);
 
-	printk(KERN_INFO "JFFS2 version 2.2"
+	printk(KERN_INFO "JFFS2 version 2.2."
 #ifdef CONFIG_JFFS2_FS_WRITEBUFFER
 	       " (NAND)"
 #endif
 #ifdef CONFIG_JFFS2_SUMMARY
-	       " (SUMMARY)"
+	       " (SUMMARY) "
 #endif
-#ifdef CONFIG_JFFS2_ZLIB
-	       " (ZLIB)"
-#endif
-#ifdef CONFIG_JFFS2_LZO
-	       " (LZO)"
-#endif
-#ifdef CONFIG_JFFS2_LZMA
-	       " (LZMA)"
-#endif
-#ifdef CONFIG_JFFS2_RTIME
-	       " (RTIME)"
-#endif
-#ifdef CONFIG_JFFS2_RUBIN
-	       " (RUBIN)"
-#endif
-#ifdef  CONFIG_JFFS2_CMODE_NONE
-	       " (CMODE_NONE)"
-#endif
-#ifdef CONFIG_JFFS2_CMODE_PRIORITY
-	       " (CMODE_PRIORITY)"
-#endif
-#ifdef CONFIG_JFFS2_CMODE_SIZE
-	       " (CMODE_SIZE)"
-#endif
-#ifdef CONFIG_JFFS2_CMODE_FAVOURLZO
-	       " (CMODE_FAVOURLZO)"
-#endif
-	       " (c) 2001-2006 Red Hat, Inc.\n");
+	       " Â© 2001-2006 Red Hat, Inc.\n");
 
 	jffs2_inode_cachep = kmem_cache_create("jffs2_i",
 					     sizeof(struct jffs2_inode_info),
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/block.c linux-2.6.36/fs/squashfs/block.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/block.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/block.c	2010-10-21 04:30:22.000000000 +0800
@@ -34,6 +34,7 @@
 
 #include "squashfs_fs.h"
 #include "squashfs_fs_sb.h"
+#include "squashfs_fs_i.h"
 #include "squashfs.h"
 #include "decompressor.h"
 
@@ -63,14 +64,6 @@
 		*length = (unsigned char) bh->b_data[*offset] |
 			(unsigned char) bh->b_data[*offset + 1] << 8;
 		*offset += 2;
-
-		if (*offset == msblk->devblksize) {
-			put_bh(bh);
-			bh = sb_bread(sb, ++(*cur_index));
-			if (bh == NULL)
-				return NULL;
-			*offset = 0;
-		}
 	}
 
 	return bh;
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/cache.c linux-2.6.36/fs/squashfs/cache.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/cache.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/cache.c	2010-10-21 04:30:22.000000000 +0800
@@ -55,6 +55,7 @@
 
 #include "squashfs_fs.h"
 #include "squashfs_fs_sb.h"
+#include "squashfs_fs_i.h"
 #include "squashfs.h"
 
 /*
@@ -104,7 +105,7 @@
 			entry = &cache->entry[i];
 
 			/*
-			 * Initialise chosen cache entry, and fill it in from
+			 * Initialise choosen cache entry, and fill it in from
 			 * disk.
 			 */
 			cache->unused--;
@@ -286,7 +287,7 @@
 
 
 /*
- * Copy up to length bytes from cache entry to buffer starting at offset bytes
+ * Copy upto length bytes from cache entry to buffer starting at offset bytes
  * into the cache entry.  If there's not length bytes then copy the number of
  * bytes available.  In all cases return the number of bytes copied.
  */
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/decompressor.c linux-2.6.36/fs/squashfs/decompressor.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/decompressor.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/decompressor.c	2010-10-21 04:30:22.000000000 +0800
@@ -23,11 +23,11 @@
 
 #include <linux/types.h>
 #include <linux/mutex.h>
-#include <linux/slab.h>
 #include <linux/buffer_head.h>
 
 #include "squashfs_fs.h"
 #include "squashfs_fs_sb.h"
+#include "squashfs_fs_i.h"
 #include "decompressor.h"
 #include "squashfs.h"
 
@@ -41,26 +41,23 @@
 };
 
 #ifndef CONFIG_SQUASHFS_LZO
-static const struct squashfs_decompressor squashfs_lzo_comp_ops = {
+static const struct squashfs_decompressor squashfs_lzo_unsupported_comp_ops = {
 	NULL, NULL, NULL, LZO_COMPRESSION, "lzo", 0
 };
 #endif
 
-#ifndef CONFIG_SQUASHFS_XZ
-static const struct squashfs_decompressor squashfs_xz_comp_ops = {
-	NULL, NULL, NULL, XZ_COMPRESSION, "xz", 0
-};
-#endif
-
 static const struct squashfs_decompressor squashfs_unknown_comp_ops = {
 	NULL, NULL, NULL, 0, "unknown", 0
 };
 
 static const struct squashfs_decompressor *decompressor[] = {
 	&squashfs_zlib_comp_ops,
-	&squashfs_lzo_comp_ops,
-	&squashfs_xz_comp_ops,
 	&squashfs_lzma_unsupported_comp_ops,
+#ifdef CONFIG_SQUASHFS_LZO
+	&squashfs_lzo_comp_ops,
+#else
+	&squashfs_lzo_unsupported_comp_ops,
+#endif
 	&squashfs_unknown_comp_ops
 };
 
@@ -75,36 +72,3 @@
 
 	return decompressor[i];
 }
-
-
-void *squashfs_decompressor_init(struct super_block *sb, unsigned short flags)
-{
-	struct squashfs_sb_info *msblk = sb->s_fs_info;
-	void *strm, *buffer = NULL;
-	int length = 0;
-
-	/*
-	 * Read decompressor specific options from file system if present
-	 */
-	if (SQUASHFS_COMP_OPTS(flags)) {
-		buffer = kmalloc(PAGE_CACHE_SIZE, GFP_KERNEL);
-		if (buffer == NULL)
-			return ERR_PTR(-ENOMEM);
-
-		length = squashfs_read_data(sb, &buffer,
-			sizeof(struct squashfs_super_block), 0, NULL,
-			PAGE_CACHE_SIZE, 1);
-
-		if (length < 0) {
-			strm = ERR_PTR(length);
-			goto finished;
-		}
-	}
-
-	strm = msblk->decompressor->init(msblk, buffer, length);
-
-finished:
-	kfree(buffer);
-
-	return strm;
-}
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/decompressor.h linux-2.6.36/fs/squashfs/decompressor.h
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/decompressor.h	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/decompressor.h	2010-10-21 04:30:22.000000000 +0800
@@ -24,7 +24,7 @@
  */
 
 struct squashfs_decompressor {
-	void	*(*init)(struct squashfs_sb_info *, void *, int);
+	void	*(*init)(struct squashfs_sb_info *);
 	void	(*free)(void *);
 	int	(*decompress)(struct squashfs_sb_info *, void **,
 		struct buffer_head **, int, int, int, int, int);
@@ -33,6 +33,11 @@
 	int	supported;
 };
 
+static inline void *squashfs_decompressor_init(struct squashfs_sb_info *msblk)
+{
+	return msblk->decompressor->init(msblk);
+}
+
 static inline void squashfs_decompressor_free(struct squashfs_sb_info *msblk,
 	void *s)
 {
@@ -47,13 +52,4 @@
 	return msblk->decompressor->decompress(msblk, buffer, bh, b, offset,
 		length, srclength, pages);
 }
-
-#ifdef CONFIG_SQUASHFS_XZ
-extern const struct squashfs_decompressor squashfs_xz_comp_ops;
-#endif
-
-#ifdef CONFIG_SQUASHFS_LZO
-extern const struct squashfs_decompressor squashfs_lzo_comp_ops;
-#endif
-
 #endif
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/dir.c linux-2.6.36/fs/squashfs/dir.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/dir.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/dir.c	2010-10-21 04:30:22.000000000 +0800
@@ -172,11 +172,6 @@
 		length += sizeof(dirh);
 
 		dir_count = le32_to_cpu(dirh.count) + 1;
-
-		/* dir_count should never be larger than 256 */
-		if (dir_count > 256)
-			goto failed_read;
-
 		while (dir_count--) {
 			/*
 			 * Read directory entry.
@@ -188,10 +183,6 @@
 
 			size = le16_to_cpu(dire->size) + 1;
 
-			/* size should never be larger than SQUASHFS_NAME_LEN */
-			if (size > SQUASHFS_NAME_LEN)
-				goto failed_read;
-
 			err = squashfs_read_metadata(inode->i_sb, dire->name,
 					&block, &offset, size);
 			if (err < 0)
@@ -239,6 +230,5 @@
 
 const struct file_operations squashfs_dir_ops = {
 	.read = generic_read_dir,
-	.readdir = squashfs_readdir,
-	.llseek = default_llseek,
+	.readdir = squashfs_readdir
 };
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/fragment.c linux-2.6.36/fs/squashfs/fragment.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/fragment.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/fragment.c	2010-10-21 04:30:22.000000000 +0800
@@ -39,6 +39,7 @@
 
 #include "squashfs_fs.h"
 #include "squashfs_fs_sb.h"
+#include "squashfs_fs_i.h"
 #include "squashfs.h"
 
 /*
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/id.c linux-2.6.36/fs/squashfs/id.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/id.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/id.c	2010-10-21 04:30:22.000000000 +0800
@@ -37,6 +37,7 @@
 
 #include "squashfs_fs.h"
 #include "squashfs_fs_sb.h"
+#include "squashfs_fs_i.h"
 #include "squashfs.h"
 
 /*
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/Kconfig linux-2.6.36/fs/squashfs/Kconfig
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/Kconfig	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/Kconfig	2010-10-21 04:30:22.000000000 +0800
@@ -5,12 +5,12 @@
 	help
 	  Saying Y here includes support for SquashFS 4.0 (a Compressed
 	  Read-Only File System).  Squashfs is a highly compressed read-only
-	  filesystem for Linux.  It uses zlib, lzo or xz compression to
-	  compress both files, inodes and directories.  Inodes in the system
-	  are very small and all blocks are packed to minimise data overhead.
-	  Block sizes greater than 4K are supported up to a maximum of 1 Mbytes
-	  (default block size 128K).  SquashFS 4.0 supports 64 bit filesystems
-	  and files (larger than 4GB), full uid/gid information, hard links and
+	  filesystem for Linux.  It uses zlib/lzo compression to compress both
+	  files, inodes and directories.  Inodes in the system are very small
+	  and all blocks are packed to minimise data overhead. Block sizes
+	  greater than 4K are supported up to a maximum of 1 Mbytes (default
+	  block size 128K).  SquashFS 4.0 supports 64 bit filesystems and files
+	  (larger than 4GB), full uid/gid information, hard links and
 	  timestamps.
 
 	  Squashfs is intended for general read-only filesystem use, for
@@ -29,6 +29,7 @@
 config SQUASHFS_XATTR
 	bool "Squashfs XATTR support"
 	depends on SQUASHFS
+	default n
 	help
 	  Saying Y here includes support for extended attributes (xattrs).
 	  Xattrs are name:value pairs associated with inodes by
@@ -39,6 +40,7 @@
 config SQUASHFS_LZO
 	bool "Include support for LZO compressed file systems"
 	depends on SQUASHFS
+	default n
 	select LZO_DECOMPRESS
 	help
 	  Saying Y here includes support for reading Squashfs file systems
@@ -51,24 +53,10 @@
 
 	  If unsure, say N.
 
-config SQUASHFS_XZ
-	bool "Include support for XZ compressed file systems"
-	depends on SQUASHFS
-	select XZ_DEC
-	help
-	  Saying Y here includes support for reading Squashfs file systems
-	  compressed with XZ compresssion.  XZ gives better compression than
-	  the default zlib compression, at the expense of greater CPU and
-	  memory overhead.
-
-	  XZ is not the standard compression used in Squashfs and so most
-	  file systems will be readable without selecting this option.
-
-	  If unsure, say N.
-
 config SQUASHFS_EMBEDDED
 	bool "Additional option for memory-constrained systems"
 	depends on SQUASHFS
+	default n
 	help
 	  Saying Y here allows you to specify cache size.
 
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/lzma_wrapper.c linux-2.6.36/fs/squashfs/lzma_wrapper.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/lzma_wrapper.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/lzma_wrapper.c	1970-01-01 08:00:00.000000000 +0800
@@ -1,152 +0,0 @@
-/*
- * Squashfs - a compressed read only filesystem for Linux
- *
- * Copyright (c) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
- * Phillip Lougher <phillip@lougher.demon.co.uk>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2,
- * or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
- *
- * lzma_wrapper.c
- */
-
-#include <asm/unaligned.h>
-#include <linux/slab.h>
-#include <linux/buffer_head.h>
-#include <linux/mutex.h>
-#include <linux/vmalloc.h>
-#include <linux/decompress/unlzma.h>
-
-#include "squashfs_fs.h"
-#include "squashfs_fs_sb.h"
-#include "squashfs_fs_i.h"
-#include "squashfs.h"
-#include "decompressor.h"
-
-struct squashfs_lzma {
-	void	*input;
-	void	*output;
-};
-
-/* decompress_unlzma.c is currently non re-entrant... */
-DEFINE_MUTEX(lzma_mutex);
-
-/* decompress_unlzma.c doesn't provide any context in its callbacks... */
-static int lzma_error;
-
-static void error(char *m)
-{
-	ERROR("unlzma error: %s\n", m);
-	lzma_error = 1;
-}
-
-
-static void *lzma_init(struct squashfs_sb_info *msblk)
-{
-	struct squashfs_lzma *stream = kzalloc(sizeof(*stream), GFP_KERNEL);
-	if (stream == NULL)
-		goto failed;
-	stream->input = vmalloc(msblk->block_size);
-	if (stream->input == NULL)
-		goto failed;
-	stream->output = vmalloc(msblk->block_size);
-	if (stream->output == NULL)
-		goto failed2;
-
-	return stream;
-
-failed2:
-	vfree(stream->input);
-failed:
-	ERROR("failed to allocate lzma workspace\n");
-	kfree(stream);
-	return NULL;
-}
-
-
-static void lzma_free(void *strm)
-{
-	struct squashfs_lzma *stream = strm;
-
-	if (stream) {
-		vfree(stream->input);
-		vfree(stream->output);
-	}
-	kfree(stream);
-}
-
-
-static int lzma_uncompress(struct squashfs_sb_info *msblk, void **buffer,
-	struct buffer_head **bh, int b, int offset, int length, int srclength,
-	int pages)
-{
-	struct squashfs_lzma *stream = msblk->stream;
-	void *buff = stream->input;
-	int avail, i, bytes = length, res;
-
-	mutex_lock(&lzma_mutex);
-
-	for (i = 0; i < b; i++) {
-		wait_on_buffer(bh[i]);
-		if (!buffer_uptodate(bh[i]))
-			goto block_release;
-
-		avail = min(bytes, msblk->devblksize - offset);
-		memcpy(buff, bh[i]->b_data + offset, avail);
-		buff += avail;
-		bytes -= avail;
-		offset = 0;
-		put_bh(bh[i]);
-	}
-
-	lzma_error = 0;
-	res = unlzma(stream->input, length, NULL, NULL, stream->output, NULL,
-							error);
-	if (res || lzma_error)
-		goto failed;
-
-	/* uncompressed size is stored in the LZMA header (5 byte offset) */
-	res = bytes = get_unaligned_le32(stream->input + 5);
-	for (i = 0, buff = stream->output; bytes && i < pages; i++) {
-		avail = min_t(int, bytes, PAGE_CACHE_SIZE);
-		memcpy(buffer[i], buff, avail);
-		buff += avail;
-		bytes -= avail;
-	}
-	if (bytes)
-		goto failed;
-
-	mutex_unlock(&lzma_mutex);
-	return res;
-
-block_release:
-	for (; i < b; i++)
-		put_bh(bh[i]);
-
-failed:
-	mutex_unlock(&lzma_mutex);
-
-	ERROR("lzma decompression failed, data probably corrupt\n");
-	return -EIO;
-}
-
-const struct squashfs_decompressor squashfs_lzma_comp_ops = {
-	.init = lzma_init,
-	.free = lzma_free,
-	.decompress = lzma_uncompress,
-	.id = LZMA_COMPRESSION,
-	.name = "lzma",
-	.supported = 1
-};
-
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/lzo_wrapper.c linux-2.6.36/fs/squashfs/lzo_wrapper.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/lzo_wrapper.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/lzo_wrapper.c	2010-10-21 04:30:22.000000000 +0800
@@ -29,6 +29,7 @@
 
 #include "squashfs_fs.h"
 #include "squashfs_fs_sb.h"
+#include "squashfs_fs_i.h"
 #include "squashfs.h"
 #include "decompressor.h"
 
@@ -37,7 +38,7 @@
 	void	*output;
 };
 
-static void *lzo_init(struct squashfs_sb_info *msblk, void *buff, int len)
+static void *lzo_init(struct squashfs_sb_info *msblk)
 {
 	int block_size = max_t(int, msblk->block_size, SQUASHFS_METADATA_SIZE);
 
@@ -58,7 +59,7 @@
 failed:
 	ERROR("Failed to allocate lzo workspace\n");
 	kfree(stream);
-	return ERR_PTR(-ENOMEM);
+	return NULL;
 }
 
 
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/Makefile linux-2.6.36/fs/squashfs/Makefile
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/Makefile	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/Makefile	2010-10-21 04:30:22.000000000 +0800
@@ -7,4 +7,3 @@
 squashfs-y += namei.o super.o symlink.o zlib_wrapper.o decompressor.o
 squashfs-$(CONFIG_SQUASHFS_XATTR) += xattr.o xattr_id.o
 squashfs-$(CONFIG_SQUASHFS_LZO) += lzo_wrapper.o
-squashfs-$(CONFIG_SQUASHFS_XZ) += xz_wrapper.o
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/namei.c linux-2.6.36/fs/squashfs/namei.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/namei.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/namei.c	2010-10-21 04:30:22.000000000 +0800
@@ -176,11 +176,6 @@
 		length += sizeof(dirh);
 
 		dir_count = le32_to_cpu(dirh.count) + 1;
-
-		/* dir_count should never be larger than 256 */
-		if (dir_count > 256)
-			goto data_error;
-
 		while (dir_count--) {
 			/*
 			 * Read directory entry.
@@ -192,10 +187,6 @@
 
 			size = le16_to_cpu(dire->size) + 1;
 
-			/* size should never be larger than SQUASHFS_NAME_LEN */
-			if (size > SQUASHFS_NAME_LEN)
-				goto data_error;
-
 			err = squashfs_read_metadata(dir->i_sb, dire->name,
 					&block, &offset, size);
 			if (err < 0)
@@ -237,9 +228,6 @@
 	d_add(dentry, inode);
 	return ERR_PTR(0);
 
-data_error:
-	err = -EIO;
-
 read_failure:
 	ERROR("Unable to read directory block [%llx:%x]\n",
 		squashfs_i(dir)->start + msblk->directory_table,
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/squashfs_fs.h linux-2.6.36/fs/squashfs/squashfs_fs.h
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/squashfs_fs.h	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/squashfs_fs.h	2010-10-21 04:30:22.000000000 +0800
@@ -57,7 +57,6 @@
 #define SQUASHFS_ALWAYS_FRAG		5
 #define SQUASHFS_DUPLICATE		6
 #define SQUASHFS_EXPORT			7
-#define SQUASHFS_COMP_OPT		10
 
 #define SQUASHFS_BIT(flag, bit)		((flag >> bit) & 1)
 
@@ -82,9 +81,6 @@
 #define SQUASHFS_EXPORTABLE(flags)		SQUASHFS_BIT(flags, \
 						SQUASHFS_EXPORT)
 
-#define SQUASHFS_COMP_OPTS(flags)		SQUASHFS_BIT(flags, \
-						SQUASHFS_COMP_OPT)
-
 /* Max number of types and file types */
 #define SQUASHFS_DIR_TYPE		1
 #define SQUASHFS_REG_TYPE		2
@@ -242,7 +238,6 @@
 #define ZLIB_COMPRESSION	1
 #define LZMA_COMPRESSION	2
 #define LZO_COMPRESSION		3
-#define XZ_COMPRESSION		4
 
 struct squashfs_super_block {
 	__le32			s_magic;
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/squashfs_fs_i.h linux-2.6.36/fs/squashfs/squashfs_fs_i.h
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/squashfs_fs_i.h	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/squashfs_fs_i.h	2010-10-21 04:30:22.000000000 +0800
@@ -45,10 +45,4 @@
 	};
 	struct inode	vfs_inode;
 };
-
-
-static inline struct squashfs_inode_info *squashfs_i(struct inode *inode)
-{
-	return list_entry(inode, struct squashfs_inode_info, vfs_inode);
-}
 #endif
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/squashfs.h linux-2.6.36/fs/squashfs/squashfs.h
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/squashfs.h	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/squashfs.h	2010-10-21 04:30:22.000000000 +0800
@@ -27,6 +27,11 @@
 
 #define WARNING(s, args...)	pr_warning("SQUASHFS: "s, ## args)
 
+static inline struct squashfs_inode_info *squashfs_i(struct inode *inode)
+{
+	return list_entry(inode, struct squashfs_inode_info, vfs_inode);
+}
+
 /* block.c */
 extern int squashfs_read_data(struct super_block *, void **, u64, int, u64 *,
 				int, int);
@@ -48,7 +53,6 @@
 
 /* decompressor.c */
 extern const struct squashfs_decompressor *squashfs_lookup_decompressor(int);
-extern void *squashfs_decompressor_init(struct super_block *, unsigned short);
 
 /* export.c */
 extern __le64 *squashfs_read_inode_lookup_table(struct super_block *, u64,
@@ -100,3 +104,6 @@
 
 /* zlib_wrapper.c */
 extern const struct squashfs_decompressor squashfs_zlib_comp_ops;
+
+/* lzo_wrapper.c */
+extern const struct squashfs_decompressor squashfs_lzo_comp_ops;
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/super.c linux-2.6.36/fs/squashfs/super.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/super.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/super.c	2010-10-21 04:30:22.000000000 +0800
@@ -30,6 +30,7 @@
 #include <linux/fs.h>
 #include <linux/vfs.h>
 #include <linux/slab.h>
+#include <linux/smp_lock.h>
 #include <linux/mutex.h>
 #include <linux/pagemap.h>
 #include <linux/init.h>
@@ -199,6 +200,10 @@
 
 	err = -ENOMEM;
 
+	msblk->stream = squashfs_decompressor_init(msblk);
+	if (msblk->stream == NULL)
+		goto failed_mount;
+
 	msblk->block_cache = squashfs_cache_init("metadata",
 			SQUASHFS_CACHED_BLKS, SQUASHFS_METADATA_SIZE);
 	if (msblk->block_cache == NULL)
@@ -211,13 +216,6 @@
 		goto failed_mount;
 	}
 
-	msblk->stream = squashfs_decompressor_init(sb, flags);
-	if (IS_ERR(msblk->stream)) {
-		err = PTR_ERR(msblk->stream);
-		msblk->stream = NULL;
-		goto failed_mount;
-	}
-
 	/* Allocate and read id index table */
 	msblk->id_table = squashfs_read_id_index_table(sb,
 		le64_to_cpu(sblk->id_table_start), le16_to_cpu(sblk->no_ids));
@@ -356,6 +354,8 @@
 
 static void squashfs_put_super(struct super_block *sb)
 {
+	lock_kernel();
+
 	if (sb->s_fs_info) {
 		struct squashfs_sb_info *sbi = sb->s_fs_info;
 		squashfs_cache_delete(sbi->block_cache);
@@ -370,6 +370,8 @@
 		kfree(sb->s_fs_info);
 		sb->s_fs_info = NULL;
 	}
+
+	unlock_kernel();
 }
 
 
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/xattr.c linux-2.6.36/fs/squashfs/xattr.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/xattr.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/xattr.c	2010-10-21 04:30:22.000000000 +0800
@@ -158,18 +158,17 @@
 					strncmp(target, name, name_size) == 0) {
 			/* found xattr */
 			if (type & SQUASHFS_XATTR_VALUE_OOL) {
-				__le64 xattr_val;
-				u64 xattr;
+				__le64 xattr;
 				/* val is a reference to the real location */
 				err = squashfs_read_metadata(sb, &val, &start,
 						&offset, sizeof(val));
 				if (err < 0)
 					goto failed;
-				err = squashfs_read_metadata(sb, &xattr_val,
-					&start, &offset, sizeof(xattr_val));
+				err = squashfs_read_metadata(sb, &xattr, &start,
+					 &offset, sizeof(xattr));
 				if (err < 0)
 					goto failed;
-				xattr = le64_to_cpu(xattr_val);
+				xattr = le64_to_cpu(xattr);
 				start = SQUASHFS_XATTR_BLK(xattr) +
 							msblk->xattr_table;
 				offset = SQUASHFS_XATTR_OFFSET(xattr);
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/xattr.h linux-2.6.36/fs/squashfs/xattr.h
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/xattr.h	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/xattr.h	2010-10-21 04:30:22.000000000 +0800
@@ -25,7 +25,7 @@
 extern __le64 *squashfs_read_xattr_id_table(struct super_block *, u64,
 		u64 *, int *);
 extern int squashfs_xattr_lookup(struct super_block *, unsigned int, int *,
-		unsigned int *, unsigned long long *);
+		int *, unsigned long long *);
 #else
 static inline __le64 *squashfs_read_xattr_id_table(struct super_block *sb,
 		u64 start, u64 *xattr_table_start, int *xattr_ids)
@@ -35,7 +35,7 @@
 }
 
 static inline int squashfs_xattr_lookup(struct super_block *sb,
-		unsigned int index, int *count, unsigned int *size,
+		unsigned int index, int *count, int *size,
 		unsigned long long *xattr)
 {
 	return 0;
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/xattr_id.c linux-2.6.36/fs/squashfs/xattr_id.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/xattr_id.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/xattr_id.c	2010-10-21 04:30:22.000000000 +0800
@@ -32,8 +32,8 @@
 
 #include "squashfs_fs.h"
 #include "squashfs_fs_sb.h"
+#include "squashfs_fs_i.h"
 #include "squashfs.h"
-#include "xattr.h"
 
 /*
  * Map xattr id using the xattr id look up table
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/xz_wrapper.c linux-2.6.36/fs/squashfs/xz_wrapper.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/xz_wrapper.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/xz_wrapper.c	1970-01-01 08:00:00.000000000 +0800
@@ -1,180 +0,0 @@
-/*
- * Squashfs - a compressed read only filesystem for Linux
- *
- * Copyright (c) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
- * Phillip Lougher <phillip@lougher.demon.co.uk>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2,
- * or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
- *
- * xz_wrapper.c
- */
-
-
-#include <linux/mutex.h>
-#include <linux/buffer_head.h>
-#include <linux/slab.h>
-#include <linux/xz.h>
-#include <linux/bitops.h>
-
-#include "squashfs_fs.h"
-#include "squashfs_fs_sb.h"
-#include "squashfs.h"
-#include "decompressor.h"
-
-struct squashfs_xz {
-	struct xz_dec *state;
-	struct xz_buf buf;
-};
-
-struct comp_opts {
-	__le32 dictionary_size;
-	__le32 flags;
-};
-
-static void *squashfs_xz_init(struct squashfs_sb_info *msblk, void *buff,
-	int len)
-{
-	struct comp_opts *comp_opts = buff;
-	struct squashfs_xz *stream;
-	int dict_size = msblk->block_size;
-	int err, n;
-
-	if (comp_opts) {
-		/* check compressor options are the expected length */
-		if (len < sizeof(*comp_opts)) {
-			err = -EIO;
-			goto failed;
-		}
-
-		dict_size = le32_to_cpu(comp_opts->dictionary_size);
-
-		/* the dictionary size should be 2^n or 2^n+2^(n+1) */
-		n = ffs(dict_size) - 1;
-		if (dict_size != (1 << n) && dict_size != (1 << n) +
-						(1 << (n + 1))) {
-			err = -EIO;
-			goto failed;
-		}
-	}
-
-	dict_size = max_t(int, dict_size, SQUASHFS_METADATA_SIZE);
-
-	stream = kmalloc(sizeof(*stream), GFP_KERNEL);
-	if (stream == NULL) {
-		err = -ENOMEM;
-		goto failed;
-	}
-
-	stream->state = xz_dec_init(XZ_PREALLOC, dict_size);
-	if (stream->state == NULL) {
-		kfree(stream);
-		err = -ENOMEM;
-		goto failed;
-	}
-
-	return stream;
-
-failed:
-	ERROR("Failed to initialise xz decompressor\n");
-	return ERR_PTR(err);
-}
-
-
-static void squashfs_xz_free(void *strm)
-{
-	struct squashfs_xz *stream = strm;
-
-	if (stream) {
-		xz_dec_end(stream->state);
-		kfree(stream);
-	}
-}
-
-
-static int squashfs_xz_uncompress(struct squashfs_sb_info *msblk, void **buffer,
-	struct buffer_head **bh, int b, int offset, int length, int srclength,
-	int pages)
-{
-	enum xz_ret xz_err;
-	int avail, total = 0, k = 0, page = 0;
-	struct squashfs_xz *stream = msblk->stream;
-
-	mutex_lock(&msblk->read_data_mutex);
-
-	xz_dec_reset(stream->state);
-	stream->buf.in_pos = 0;
-	stream->buf.in_size = 0;
-	stream->buf.out_pos = 0;
-	stream->buf.out_size = PAGE_CACHE_SIZE;
-	stream->buf.out = buffer[page++];
-
-	do {
-		if (stream->buf.in_pos == stream->buf.in_size && k < b) {
-			avail = min(length, msblk->devblksize - offset);
-			length -= avail;
-			wait_on_buffer(bh[k]);
-			if (!buffer_uptodate(bh[k]))
-				goto release_mutex;
-
-			stream->buf.in = bh[k]->b_data + offset;
-			stream->buf.in_size = avail;
-			stream->buf.in_pos = 0;
-			offset = 0;
-		}
-
-		if (stream->buf.out_pos == stream->buf.out_size
-							&& page < pages) {
-			stream->buf.out = buffer[page++];
-			stream->buf.out_pos = 0;
-			total += PAGE_CACHE_SIZE;
-		}
-
-		xz_err = xz_dec_run(stream->state, &stream->buf);
-
-		if (stream->buf.in_pos == stream->buf.in_size && k < b)
-			put_bh(bh[k++]);
-	} while (xz_err == XZ_OK);
-
-	if (xz_err != XZ_STREAM_END) {
-		ERROR("xz_dec_run error, data probably corrupt\n");
-		goto release_mutex;
-	}
-
-	if (k < b) {
-		ERROR("xz_uncompress error, input remaining\n");
-		goto release_mutex;
-	}
-
-	total += stream->buf.out_pos;
-	mutex_unlock(&msblk->read_data_mutex);
-	return total;
-
-release_mutex:
-	mutex_unlock(&msblk->read_data_mutex);
-
-	for (; k < b; k++)
-		put_bh(bh[k]);
-
-	return -EIO;
-}
-
-const struct squashfs_decompressor squashfs_xz_comp_ops = {
-	.init = squashfs_xz_init,
-	.free = squashfs_xz_free,
-	.decompress = squashfs_xz_uncompress,
-	.id = XZ_COMPRESSION,
-	.name = "xz",
-	.supported = 1
-};
diff -Nur linux-2.6.36_builded_sdk_orig/fs/squashfs/zlib_wrapper.c linux-2.6.36/fs/squashfs/zlib_wrapper.c
--- linux-2.6.36_builded_sdk_orig/fs/squashfs/zlib_wrapper.c	2012-12-10 16:31:50.000000000 +0800
+++ linux-2.6.36/fs/squashfs/zlib_wrapper.c	2010-10-21 04:30:22.000000000 +0800
@@ -26,19 +26,20 @@
 #include <linux/buffer_head.h>
 #include <linux/slab.h>
 #include <linux/zlib.h>
-#include <linux/vmalloc.h>
 
 #include "squashfs_fs.h"
 #include "squashfs_fs_sb.h"
+#include "squashfs_fs_i.h"
 #include "squashfs.h"
 #include "decompressor.h"
 
-static void *zlib_init(struct squashfs_sb_info *dummy, void *buff, int len)
+static void *zlib_init(struct squashfs_sb_info *dummy)
 {
 	z_stream *stream = kmalloc(sizeof(z_stream), GFP_KERNEL);
 	if (stream == NULL)
 		goto failed;
-	stream->workspace = vmalloc(zlib_inflate_workspacesize());
+	stream->workspace = kmalloc(zlib_inflate_workspacesize(),
+		GFP_KERNEL);
 	if (stream->workspace == NULL)
 		goto failed;
 
@@ -47,7 +48,7 @@
 failed:
 	ERROR("Failed to allocate zlib workspace\n");
 	kfree(stream);
-	return ERR_PTR(-ENOMEM);
+	return NULL;
 }
 
 
@@ -56,7 +57,7 @@
 	z_stream *stream = strm;
 
 	if (stream)
-		vfree(stream->workspace);
+		kfree(stream->workspace);
 	kfree(stream);
 }
 
@@ -65,8 +66,8 @@
 	struct buffer_head **bh, int b, int offset, int length, int srclength,
 	int pages)
 {
-	int zlib_err, zlib_init = 0;
-	int k = 0, page = 0;
+	int zlib_err = 0, zlib_init = 0;
+	int avail, bytes, k = 0, page = 0;
 	z_stream *stream = msblk->stream;
 
 	mutex_lock(&msblk->read_data_mutex);
@@ -74,14 +75,21 @@
 	stream->avail_out = 0;
 	stream->avail_in = 0;
 
+	bytes = length;
 	do {
 		if (stream->avail_in == 0 && k < b) {
-			int avail = min(length, msblk->devblksize - offset);
-			length -= avail;
+			avail = min(bytes, msblk->devblksize - offset);
+			bytes -= avail;
 			wait_on_buffer(bh[k]);
 			if (!buffer_uptodate(bh[k]))
 				goto release_mutex;
 
+			if (avail == 0) {
+				offset = 0;
+				put_bh(bh[k++]);
+				continue;
+			}
+
 			stream->next_in = bh[k]->b_data + offset;
 			stream->avail_in = avail;
 			offset = 0;
@@ -120,11 +128,6 @@
 		goto release_mutex;
 	}
 
-	if (k < b) {
-		ERROR("zlib_uncompress error, data remaining\n");
-		goto release_mutex;
-	}
-
 	length = stream->total_out;
 	mutex_unlock(&msblk->read_data_mutex);
 	return length;
