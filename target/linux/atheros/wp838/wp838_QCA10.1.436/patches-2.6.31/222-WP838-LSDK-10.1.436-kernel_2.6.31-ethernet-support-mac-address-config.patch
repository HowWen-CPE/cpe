Index: linux-2.6.31/drivers/net/ethernet/include/osdep.h
===================================================================
--- linux-2.6.31.orig/drivers/net/ethernet/include/osdep.h	2013-11-21 17:19:56.153579816 +0800
+++ linux-2.6.31/drivers/net/ethernet/include/osdep.h	2013-11-21 17:20:48.767060800 +0800
@@ -172,6 +172,7 @@
                                  athr_gmac_do_ioctl,            \
                                  athr_gmac_poll,                \
                                  athr_gmac_tx_timeout,          \
+                                 ath_gmac_set_macaddr,        \
                                  ATHR_MAC_NAPI_WEIGHT,          \
                                  tx_qlen)                       \
 do {                                                            \
@@ -181,6 +182,7 @@
         athr_gmac_net_ops.ndo_get_stats = athr_gmac_get_stats,  \
         athr_gmac_net_ops.ndo_tx_timeout= athr_gmac_tx_timeout, \
         athr_gmac_net_ops.ndo_do_ioctl  = athr_gmac_do_ioctl,   \
+        athr_gmac_net_ops.ndo_set_mac_address = ath_gmac_set_macaddr, \
         dev->tx_queue_len = tx_qlen;                            \
         dev->netdev_ops = (const struct net_device_ops *)       \
                                 &athr_gmac_net_ops;             \
@@ -188,9 +190,7 @@
                         athr_gmac_poll,                         \
                         ATHR_MAC_NAPI_WEIGHT);                  \
 } while(0)
-
 #else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,31)) */
-
 /* For PRE linux 2.6.31 kernel */
 
 #define ATHR_MAC_NETPRIV(mac,dev) 				\
@@ -270,6 +270,7 @@
                                  athr_gmac_do_ioctl,    \
                                  athr_gmac_poll,        \
                                  athr_gmac_tx_timeout,  \
+                                 ath_gmac_set_macaddr,     \
                                  ATHR_MAC_NAPI_WEIGHT,  \
                                  tx_qlen)               \
 do {                                                    \
Index: linux-2.6.31/drivers/net/ethernet/qca_soc_mac.c
===================================================================
--- linux-2.6.31.orig/drivers/net/ethernet/qca_soc_mac.c	2013-11-21 17:19:33.754018348 +0800
+++ linux-2.6.31/drivers/net/ethernet/qca_soc_mac.c	2013-11-21 17:20:36.623296685 +0800
@@ -37,7 +37,6 @@
 #include <linux/if_pppox.h>
 #include <linux/ip.h>
 #include <net/checksum.h>
-
 #include "osdep.h"
 
 #include "athrs_trc.h"
@@ -105,6 +104,28 @@
   }
 }
 
+/*Add set mac interface, Sirian@Liteon, 2013-11-21----->*/
+static int
+ath_gmac_set_macaddr(struct net_device *dev, void *addr)
+{
+	struct sockaddr *mac = addr;
+	
+	if (netif_running(dev)) {
+	        printk(KERN_ERR "%s: cannot set address; device running\n", __func__);
+	        return -EBUSY;
+   	 }
+	
+   	 //printk(KERN_ERR  "%s: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n",__func__,
+        //mac->sa_data[0], mac->sa_data[1], mac->sa_data[2],
+        //mac->sa_data[3], mac->sa_data[4], mac->sa_data[5]);
+	
+      memcpy(dev->dev_addr, mac->sa_data, 6);
+	
+       return  0;
+}
+
+ /*<-----Sirian@Liteon, 2013-11-21*/
+
 /*
  * Description: Handles TX and RX ring allocation.  
  *              Register Gmac interrupt handler.
@@ -1852,9 +1873,11 @@
                                  athr_gmac_do_ioctl,
                                  athr_gmac_poll,
                                  athr_gmac_tx_timeout,
+                                 ath_gmac_set_macaddr,
                                  ATHR_GMAC_NAPI_WEIGHT,
                                  ATH_GMAC_TXQUEUELEN);
 
+
         ATH_INIT_RX_TASK();
         ATH_INIT_TX_TASK();
===================================================================
--- linux-2.6.31/drivers/net/ethernet/athrs_mac.c	2014-05-17 16:22:24.868428178 -0700
+++ linux-2.6.31-new/drivers/net/ethernet/athrs_mac.c	2014-05-17 16:21:53.252428807 -0700
@@ -134,6 +134,28 @@ void pkt_dump(uint8_t *data,int len,cons
   }
 }
 
+/* BEGIN: Added by Peter, 2014/5/18   PN:98 */
+/*Add set mac interface*/
+static int
+ath_gmac_set_macaddr(struct net_device *dev, void *addr)
+{
+	struct sockaddr *mac = addr;
+	
+	if (netif_running(dev)) {
+	        printk(KERN_ERR "%s: cannot set address; device running\n", __func__);
+	        return -EBUSY;
+   	 }
+	
+   	 //printk(KERN_ERR  "%s: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n",__func__,
+        //mac->sa_data[0], mac->sa_data[1], mac->sa_data[2],
+        //mac->sa_data[3], mac->sa_data[4], mac->sa_data[5]);
+	
+      memcpy(dev->dev_addr, mac->sa_data, 6);
+	
+       return  0;
+}
+/* END:   Added by Peter, 2014/5/18   PN:98 */
+
 static int
 athr_gmac_open(struct net_device *dev)
 {
@@ -2573,6 +2595,7 @@ athr_gmac_init(void)
                                  athr_gmac_do_ioctl,
                                  athr_gmac_poll,
                                  athr_gmac_tx_timeout,
+                                 ath_gmac_set_macaddr,
                                  ATHR_GMAC_NAPI_WEIGHT,
                                  ATH_GMAC_TXQUEUELEN);
 
