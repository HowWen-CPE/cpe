--- linux-2.6.32-freescale-p1020-sku/net/core/sock.c	2012-07-13 03:19:03.849680171 -0700
+++ linux-liteon-wp854-openwrt/net/core/sock.c	2012-07-13 03:21:13.337513140 -0700
@@ -508,6 +508,10 @@
 		else
 			sk->sk_sndbuf = val * 2;
 
+              /*Temporarily limit send buffer to 32768 to avoid ethernet hang, sirian , 2011-09-16*/
+               if (sk->sk_sndbuf > 32768)
+			   	sk->sk_sndbuf=32768;
+
 		/*
 		 *	Wake up sending tasks if we
 		 *	upped the value.
@@ -551,8 +555,13 @@
 			sk->sk_rcvbuf = SOCK_MIN_RCVBUF;
 		else
 			sk->sk_rcvbuf = val * 2;
-		break;
 
+	       /*Temporarily limit receive buffer to 32768 to avoid ethernet hang, sirian , 2011-09-16*/
+		if (sk->sk_rcvbuf >32768)
+			sk->sk_rcvbuf = 32768;
+	
+		break;
+		  
 	case SO_RCVBUFFORCE:
 		if (!capable(CAP_NET_ADMIN)) {
 			ret = -EPERM;
@@ -1386,7 +1395,7 @@
 	struct sk_buff *skb;
 	gfp_t gfp_mask;
 	long timeo;
-	int err;
+	int err, wmem;
 
 	gfp_mask = sk->sk_allocation;
 	if (gfp_mask & __GFP_WAIT)
@@ -1401,8 +1410,10 @@
 		err = -EPIPE;
 		if (sk->sk_shutdown & SEND_SHUTDOWN)
 			goto failure;
-
-		if (atomic_read(&sk->sk_wmem_alloc) < sk->sk_sndbuf) {
+                
+              wmem = atomic_read(&sk->sk_wmem_alloc);
+				
+		if (wmem < sk->sk_sndbuf) {
 			skb = alloc_skb(header_len, gfp_mask);
 			if (skb) {
 				int npages;
@@ -1442,6 +1453,8 @@
 			err = -ENOBUFS;
 			goto failure;
 		}
+
+		
 		set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags);
 		set_bit(SOCK_NOSPACE, &sk->sk_socket->flags);
 		err = -EAGAIN;
@@ -1453,6 +1466,7 @@
 	}
 
 	skb_set_owner_w(skb, sk);
+        
 	return skb;
 
 interrupted:
