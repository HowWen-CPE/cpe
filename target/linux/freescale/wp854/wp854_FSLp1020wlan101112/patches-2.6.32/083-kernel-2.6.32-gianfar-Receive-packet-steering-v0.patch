From ce6fe61cfdb5e7582b2b9b07567a801064db0be1 Mon Sep 17 00:00:00 2001
From: Sandeep Gopalpet <sandeep.kumar@freescale.com>
Date: Tue, 2 Feb 2010 12:48:22 +0530
Subject: [PATCH] gianfar: Receive packet steering

This patch aims at improving IP forwarding performance for
parallel flow scenarios on P2020. P2020 has ETSEC v1.7 that
cant distribute the incoming traffic to different cpus. As a
result, one cpu is not utilised when traffic is entering from
only one ETSEC.

In this patch, incoming packets are steered to other cpu for IP
forwarding processing based on the hash value of packet header
fields using a producer/consumer shared buffer.
A dummy netdev has been used per cpu for running napi to process
incoming packets. FSL MPIC message interrupt mechanism has been used
to interrupt one cpu from other.

Signed-off-by: Tarun Garg <b10794@freescale.com>
Signed-off-by: Sandeep Gopalpet <sandeep.kumar@freescale.com>
---
 arch/powerpc/Kconfig       |    1 +
 drivers/net/Kconfig        |    7 +
 drivers/net/gianfar.c      |  298 +++++++++++++++++++++++++++++++++++++++++++-
 drivers/net/gianfar.h      |   32 +++++-
 include/linux/sysctl.h     |    1 +
 kernel/sysctl_check.c      |    1 +
 net/core/dev.c             |    7 +-
 net/core/sysctl_net_core.c |   16 +++-
 8 files changed, 359 insertions(+), 4 deletions(-)

diff --git a/arch/powerpc/Kconfig b/arch/powerpc/Kconfig
index 2666f9a..3ec331d 100644
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@ -669,6 +669,7 @@ config FSL_GTM
 config FSL_MPIC_MSG_INTS
 	bool
 	depends on MPIC
+	default y
 	help
 	  Freescale MPIC based Message Interrupt support
 
diff --git a/drivers/net/Kconfig b/drivers/net/Kconfig
index 269693f..d2a1a71 100644
--- a/drivers/net/Kconfig
+++ b/drivers/net/Kconfig
@@ -2437,6 +2437,13 @@ config NET_GIANFAR_FP
 	  Fast path routing. To enable,
 	  $ echo 1 > /proc/sys/net/core/netdev_fastroute
 
+config GFAR_SW_PKT_STEERING
+        default n
+        bool "Enables packet steering between cpus (EXPERIMENTAL)"
+        depends on GIANFAR_TXNAPI && FSL_MPIC_MSG_INTS
+        help
+          Selecting this option enables packet steering between cpus
+
 config UCC_GETH
 	tristate "Freescale QE Gigabit Ethernet"
 	depends on QUICC_ENGINE
diff --git a/drivers/net/gianfar.c b/drivers/net/gianfar.c
index 919467e..ed12657 100644
--- a/drivers/net/gianfar.c
+++ b/drivers/net/gianfar.c
@@ -94,6 +94,9 @@
 #include <linux/phy_fixed.h>
 #include <linux/of.h>
 #include <net/xfrm.h>
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+#include <asm/fsl_msg.h>
+#endif
 
 #ifdef CONFIG_NET_GIANFAR_FP
 #include <linux/if_arp.h>
@@ -203,6 +206,10 @@ static const struct net_device_ops gfar_netdev_ops = {
 unsigned int ftp_rqfpr[MAX_FILER_IDX + 1];
 unsigned int ftp_rqfcr[MAX_FILER_IDX + 1];
 
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+DEFINE_PER_CPU(struct gfar_cpu_dev, gfar_cpu_dev);
+#endif
+
 static struct net_device_stats *gfar_get_stats(struct net_device *dev)
 {
 	struct gfar_private *priv = netdev_priv(dev);
@@ -396,6 +403,9 @@ static int gfar_of_init(struct of_device *ofdev, struct net_device **pdev)
 	const u32 *stash_idx;
 	unsigned int num_tx_qs, num_rx_qs;
 	u32 *tx_queues, *rx_queues;
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+	int sps;
+#endif
 
 	if (!np || !of_device_is_available(np))
 		return -ENODEV;
@@ -411,6 +421,14 @@ static int gfar_of_init(struct of_device *ofdev, struct net_device **pdev)
 		return -EINVAL;
 	}
 
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+	if ((num_online_cpus() == 2) &&
+		(!of_device_is_compatible(np, "fsl,etsec2"))) {
+		printk(KERN_INFO "ETSEC: IPS Enabled\n");
+		sps = 1;
+	}
+#endif
+
 	rx_queues = (u32 *)of_get_property(np, "fsl,num_rx_queues", NULL);
 	num_rx_qs = rx_queues ? *rx_queues : 1;
 
@@ -429,6 +447,9 @@ static int gfar_of_init(struct of_device *ofdev, struct net_device **pdev)
 	priv = netdev_priv(dev);
 	priv->node = ofdev->node;
 	priv->ndev = dev;
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+	priv->sps = sps;
+#endif
 
 	dev->num_tx_queues = num_tx_qs;
 	dev->real_num_tx_queues = num_tx_qs;
@@ -750,6 +771,256 @@ static int get_cpu_number(unsigned char *eth_pkt, int len)
 	return cpu_online(cpu) ? cpu : -1;
 }
 
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+static int gfar_cpu_poll(struct napi_struct *napi, int budget)
+{
+	struct gfar_cpu_dev *cpu_dev = &__get_cpu_var(gfar_cpu_dev);
+	struct sk_buff *skb = NULL;
+	int cpu = smp_processor_id();
+	int rx_cleaned = 0;
+	struct net_device *dev;
+	struct gfar_private *priv;
+	int amount_pull;
+	struct shared_buffer *buf = &per_cpu(gfar_cpu_dev, !cpu).tx_queue;
+
+	while (budget--) {
+		if (atomic_read(&buf->buff_cnt) == 0) {
+			break;
+		} else {
+			skb = buf->buffer[buf->out];
+			buf->out = (buf->out + 1) % GFAR_CPU_BUFF_SIZE;
+			atomic_dec(&buf->buff_cnt);
+
+			dev = skb->dev;
+			priv = netdev_priv(dev);
+
+			if (priv->ptimer_present)
+				amount_pull =
+				(gfar_uses_fcb(priv) ? GMAC_FCB_LEN : 0);
+			else
+				amount_pull =
+				(gfar_uses_fcb(priv) ? GMAC_FCB_LEN : 0) +
+					priv->padding;
+
+			gfar_process_frame(dev, skb, amount_pull);
+
+			rx_cleaned++;
+		}
+	}
+
+	if (budget > 0) {
+		napi_complete(napi);
+		fsl_enable_msg(cpu_dev->msg_virtual_rx);
+	}
+
+	return rx_cleaned;
+}
+
+static irqreturn_t gfar_cpu_receive(int irq, void *dev_id)
+{
+	unsigned long flags;
+	struct gfar_cpu_dev *cpu_dev = &__get_cpu_var(gfar_cpu_dev);
+
+	/* clear the status bit */
+	setbits32(cpu_dev->msg_virtual_rx->msr,
+		 (1 << cpu_dev->msg_virtual_rx->msg_num));
+
+	local_irq_save(flags);
+	if (napi_schedule_prep(&cpu_dev->napi)) {
+		/* disable irq */
+		clrbits32(cpu_dev->msg_virtual_rx->mer,
+			(1 << cpu_dev->msg_virtual_rx->msg_num));
+		__napi_schedule(&cpu_dev->napi);
+	}
+	local_irq_restore(flags);
+
+	return IRQ_HANDLED;
+}
+
+void gfar_cpu_setup(struct net_device *dev)
+{
+	return;
+}
+
+static enum hrtimer_restart gfar_cpu_timer_handle(struct hrtimer *timer)
+{
+	struct gfar_cpu_dev *this_cpu_dev = &__get_cpu_var(gfar_cpu_dev);
+	struct gfar_cpu_dev *other_cpu_dev =
+		&per_cpu(gfar_cpu_dev, !smp_processor_id());
+
+	if (timer == &this_cpu_dev->intr_coalesce_timer) {
+		fsl_send_msg(other_cpu_dev->msg_virtual_rx, 0x1);
+		this_cpu_dev->intr_coalesce_cnt = 0;
+	} else {
+		fsl_send_msg(this_cpu_dev->msg_virtual_rx, 0x1);
+		other_cpu_dev->intr_coalesce_cnt = 0;
+	}
+
+	return HRTIMER_NORESTART;
+}
+
+void gfar_cpu_dev_init(void)
+{
+	int err = -1;
+	int i = 0;
+	int j;
+	struct gfar_cpu_dev *cpu_dev;
+
+	for_each_possible_cpu(i) {
+		cpu_dev = &per_cpu(gfar_cpu_dev, i);
+		cpu_dev->enabled = 0;
+
+		cpu_dev->dev = alloc_netdev(0, "cpu%d", gfar_cpu_setup);
+		if (NULL == cpu_dev->dev) {
+			printk(KERN_WARNING
+			"%s: alloc_netdev(cpu%d) failed!\n", __func__, i);
+			return;
+		}
+
+		init_dummy_netdev(cpu_dev->dev);
+		netif_napi_add(cpu_dev->dev,
+			&cpu_dev->napi, gfar_cpu_poll, GFAR_DEV_WEIGHT);
+
+		cpu_dev->msg_virtual_rx = fsl_get_msg_unit();
+		if (IS_ERR(cpu_dev->msg_virtual_rx)) {
+			printk(KERN_WARNING
+				"%s: fsl_get_msg_unit returned error %ld!\n",
+				__func__, IS_ERR(cpu_dev->msg_virtual_rx));
+			goto msg_fail;
+		}
+
+		sprintf(cpu_dev->int_name, "cpu%d_vrx", i);
+		err = request_irq(cpu_dev->msg_virtual_rx->irq,
+			gfar_cpu_receive, 0, cpu_dev->int_name, NULL);
+		if (err < 0) {
+			printk(KERN_WARNING "Can't request msg IRQ %d\n",
+				cpu_dev->msg_virtual_rx->irq);
+			goto irq_fail;
+		}
+		fsl_enable_msg(cpu_dev->msg_virtual_rx);
+
+		for (j = 0; j < GFAR_CPU_BUFF_SIZE; j++)
+			cpu_dev->tx_queue.buffer[j] = NULL;
+
+		cpu_dev->tx_queue.in = 0;
+		cpu_dev->tx_queue.out = 0;
+		cpu_dev->tx_queue.buff_cnt.counter = 0;
+
+		napi_enable(&cpu_dev->napi);
+
+		cpu_dev->intr_coalesce_cnt = 0;
+		hrtimer_init(&cpu_dev->intr_coalesce_timer, CLOCK_MONOTONIC,
+			 HRTIMER_MODE_ABS);
+		cpu_dev->intr_coalesce_timer.function = gfar_cpu_timer_handle;
+
+		cpu_dev->enabled = 1;
+	}
+	return;
+
+irq_fail:
+	fsl_release_msg_unit(cpu_dev->msg_virtual_rx);
+
+msg_fail:
+	netif_napi_del(&cpu_dev->napi);
+	free_netdev(cpu_dev->dev);
+
+	for (j = 0; j < i; j++) {
+		cpu_dev = &per_cpu(gfar_cpu_dev, j);
+
+		cpu_dev->enabled = 0;
+		napi_disable(&cpu_dev->napi);
+		free_irq(cpu_dev->msg_virtual_rx->irq, NULL);
+		fsl_release_msg_unit(cpu_dev->msg_virtual_rx);
+		netif_napi_del(&cpu_dev->napi);
+		free_netdev(cpu_dev->dev);
+	}
+}
+
+void gfar_cpu_dev_exit(void)
+{
+	int i = 0;
+	struct gfar_cpu_dev *cpu_dev;
+
+	for_each_possible_cpu(i) {
+		cpu_dev = &per_cpu(gfar_cpu_dev, i);
+
+		hrtimer_cancel(&cpu_dev->intr_coalesce_timer);
+		napi_disable(&cpu_dev->napi);
+		free_irq(cpu_dev->msg_virtual_rx->irq, NULL);
+		fsl_release_msg_unit(cpu_dev->msg_virtual_rx);
+		netif_napi_del(&cpu_dev->napi);
+		free_netdev(cpu_dev->dev);
+	}
+}
+
+int distribute_packet(struct net_device *dev,
+			struct sk_buff *skb,
+			int amount_pull)
+{
+	struct gfar_private *priv = netdev_priv(dev);
+	struct gfar_cpu_dev *cpu_dev;
+	int target_cpu;
+	int current_cpu = smp_processor_id();
+	unsigned char *skb_data;
+	unsigned int skb_len;
+	unsigned int eth_hdr_offset = 0;
+	unsigned char *eth;
+	struct shared_buffer *buf;
+	ktime_t time;
+
+	skb_data = skb->data;
+	skb_len = skb->len;
+
+	if (amount_pull)
+		eth_hdr_offset += amount_pull;
+	if (priv->ptimer_present)
+		eth_hdr_offset += 8;
+
+	if (eth_hdr_offset > skb_len)
+		return -1;
+
+	eth = skb_data + eth_hdr_offset;
+	target_cpu = get_cpu_number(eth, skb_len - eth_hdr_offset);
+	if (-1 == target_cpu)
+		return -1;
+
+	if (target_cpu == current_cpu)
+		return -1;
+
+	cpu_dev = &__get_cpu_var(gfar_cpu_dev);
+	if (!cpu_dev->enabled)
+		return -1;
+
+	buf = &cpu_dev->tx_queue;
+	if (atomic_read(&buf->buff_cnt) == GFAR_CPU_BUFF_SIZE) {
+		kfree_skb(skb);    /* buffer full, drop packet */
+		return 0;
+	}
+
+	/* inform other cpu which dev this skb was received on */
+	skb->dev = dev;
+	buf->buffer[buf->in] = skb;
+	buf->in = (buf->in + 1) % GFAR_CPU_BUFF_SIZE;
+	atomic_inc(&buf->buff_cnt);
+
+	/* raise other core's msg intr */
+	if (0 == cpu_dev->intr_coalesce_cnt++) {
+		time = ktime_set(0, 0);
+		time = ktime_add_ns(time, INTR_COALESCE_TIMEOUT);
+		hrtimer_start(&cpu_dev->intr_coalesce_timer,
+			time, HRTIMER_MODE_ABS);
+	} else {
+		if (cpu_dev->intr_coalesce_cnt == INTR_COALESCE_CNT) {
+			cpu_dev->intr_coalesce_cnt = 0;
+			hrtimer_cancel(&cpu_dev->intr_coalesce_timer);
+			fsl_send_msg(per_cpu
+			(gfar_cpu_dev, target_cpu).msg_virtual_rx, 0x1);
+		}
+	}
+	return 0;
+}
+#endif
+
 /* Set up the ethernet device structure, private data,
  * and anything else we need before we start */
 static int gfar_probe(struct of_device *ofdev,
@@ -3024,6 +3295,9 @@ int gfar_clean_rx_ring(struct gfar_priv_rx_q *rx_queue, int rx_work_limit)
 	int amount_pull;
 	int howmany = 0;
 	struct gfar_private *priv = netdev_priv(dev);
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+	int ret;
+#endif
 #ifdef CONFIG_GFAR_SKBUFF_RECYCLING
 	int howmany_reuse = 0;
 	struct gfar_skb_handler *sh;
@@ -3112,8 +3386,24 @@ int gfar_clean_rx_ring(struct gfar_priv_rx_q *rx_queue, int rx_work_limit)
 
 				if (in_irq() || irqs_disabled())
 					printk("Interrupt problem!\n");
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+				/* Process packet here or send it to other cpu
+				   for processing based on packet headers
+				   hash value
+				 */
+				if (rcv_pkt_steering && priv->sps) {
+					ret = distribute_packet(dev,
+							skb, amount_pull);
+					if (ret)
+						gfar_process_frame(dev,
+							skb, amount_pull);
+				} else {
+					gfar_process_frame(dev,
+						skb, amount_pull);
+				}
+#else
 				gfar_process_frame(dev, skb, amount_pull);
-
+#endif
 			} else {
 				if (netif_msg_rx_err(priv))
 					printk(KERN_WARNING
@@ -3740,11 +4030,17 @@ static struct of_platform_driver gfar_driver = {
 
 static int __init gfar_init(void)
 {
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+	gfar_cpu_dev_init();
+#endif
 	return of_register_platform_driver(&gfar_driver);
 }
 
 static void __exit gfar_exit(void)
 {
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+	gfar_cpu_dev_exit();
+#endif
 	of_unregister_platform_driver(&gfar_driver);
 }
 
diff --git a/drivers/net/gianfar.h b/drivers/net/gianfar.h
index b1b7fcf..79a3462 100644
--- a/drivers/net/gianfar.h
+++ b/drivers/net/gianfar.h
@@ -9,7 +9,7 @@
  * Maintainer: Kumar Gala
  * Modifier: Sandeep Gopalpet <sandeep.kumar@freescale.com>
  *
- * Copyright 2002-2009 Freescale Semiconductor, Inc.
+ * Copyright 2002-2010 Freescale Semiconductor, Inc.
  *
  * This program is free software; you can redistribute  it and/or modify it
  * under  the terms of  the GNU General  Public License as published by the
@@ -1288,8 +1288,38 @@ struct gfar_private {
 	struct gfar_regs_1588 __iomem *ptimer;
 	struct resource timer_resource;
 	uint32_t ptimer_present;
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+	int sps; /*flag for s/w packet steering */
+#endif
+};
+
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+#define INTR_COALESCE_CNT 22
+#define INTR_COALESCE_TIMEOUT 32000 /* in nSecs */
+#define GFAR_CPU_BUFF_SIZE 64
+
+/* producer-consumer buffer for inter cpu packet transfer */
+struct shared_buffer {
+	struct sk_buff *buffer[GFAR_CPU_BUFF_SIZE];
+	int in;
+	int out;
+	atomic_t buff_cnt;
 };
 
+struct gfar_cpu_dev {
+	struct net_device *dev;
+	struct napi_struct napi;
+	struct shared_buffer tx_queue;
+	int intr_coalesce_cnt;
+	struct hrtimer intr_coalesce_timer;
+	struct fsl_msg_unit *msg_virtual_rx;
+	char int_name[GFAR_INT_NAME_MAX];
+	int enabled;
+};
+
+extern int rcv_pkt_steering;
+#endif
+
 extern unsigned int ftp_rqfpr[MAX_FILER_IDX + 1];
 extern unsigned int ftp_rqfcr[MAX_FILER_IDX + 1];
 
diff --git a/include/linux/sysctl.h b/include/linux/sysctl.h
index 1e4743e..9a754e8 100644
--- a/include/linux/sysctl.h
+++ b/include/linux/sysctl.h
@@ -284,6 +284,7 @@ enum
 	NET_CORE_AEVENT_ETIME=20,
 	NET_CORE_AEVENT_RSEQTH=21,
 	NET_CORE_WARNINGS=22,
+	RCV_PKT_STEERING = 23,
 };
 
 /* /proc/sys/net/ethernet */
diff --git a/kernel/sysctl_check.c b/kernel/sysctl_check.c
index 52d3f1f..603255f 100644
--- a/kernel/sysctl_check.c
+++ b/kernel/sysctl_check.c
@@ -151,6 +151,7 @@ static const struct trans_ctl_table trans_net_core_table[] = {
 	/* NET_CORE_DESTROY_DELAY unused */
 	{ NET_CORE_MAX_BACKLOG,		"netdev_max_backlog" },
 	{ NET_CORE_FASTROUTE,		"netdev_fastroute" },
+	{ RCV_PKT_STEERING,		"rcv_pkt_steering" },
 	{ NET_CORE_MSG_COST,		"message_cost" },
 	{ NET_CORE_MSG_BURST,		"message_burst" },
 	{ NET_CORE_OPTMEM_MAX,		"optmem_max" },
diff --git a/net/core/dev.c b/net/core/dev.c
index f0a5a26..c712ea9 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -1,7 +1,7 @@
 /*
  * 	NET3	Protocol independent device support routines.
  *
- * 		Copyright 2009 Freescale Semiconductor, Inc.
+ * 		Copyright 2009-2010 Freescale Semiconductor, Inc.
  *
  *		This program is free software; you can redistribute it and/or
  *		modify it under the terms of the GNU General Public License
@@ -262,6 +262,11 @@ int netdev_fastroute_obstacles;
 EXPORT_SYMBOL(netdev_fastroute_obstacles);
 #endif
 
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+int rcv_pkt_steering;
+EXPORT_SYMBOL(rcv_pkt_steering);
+#endif
+
 #ifdef CONFIG_LOCKDEP
 /*
  * register_netdevice() inits txq->_xmit_lock and sets lockdep class
diff --git a/net/core/sysctl_net_core.c b/net/core/sysctl_net_core.c
index fb26e1c..23dc5ce 100644
--- a/net/core/sysctl_net_core.c
+++ b/net/core/sysctl_net_core.c
@@ -3,7 +3,7 @@
  *
  * Begun April 1, 1996, Mike Shaver.
  * Added /proc/sys/net/core directory entry (empty =) ). [MS]
- * Copyright 2009 Freescale Semiconductor, Inc.
+ * Copyright 2009-2010 Freescale Semiconductor, Inc.
  */
 
 #include <linux/mm.h>
@@ -19,6 +19,10 @@
 extern int netdev_fastroute;
 #endif
 
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+extern int rcv_pkt_steering;
+#endif
+
 static struct ctl_table net_core_table[] = {
 #ifdef CONFIG_NET
 	{
@@ -47,6 +51,16 @@ static struct ctl_table net_core_table[] = {
 		.proc_handler	= &proc_dointvec
 	},
 #endif
+#ifdef CONFIG_GFAR_SW_PKT_STEERING
+	{
+		.ctl_name	= RCV_PKT_STEERING,
+		.procname	= "rcv_pkt_steering",
+		.data		= &rcv_pkt_steering,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec
+	},
+#endif
 	{
 		.ctl_name	= NET_CORE_WMEM_DEFAULT,
 		.procname	= "wmem_default",
-- 
1.5.6.3

