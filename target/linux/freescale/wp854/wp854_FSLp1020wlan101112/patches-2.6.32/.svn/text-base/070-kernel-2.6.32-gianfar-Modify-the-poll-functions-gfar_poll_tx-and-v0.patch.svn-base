From 051f64db186e550155c8f7d05fb2ff5dd6db099b Mon Sep 17 00:00:00 2001
From: Sandeep Gopalpet <sandeep.kumar@freescale.com>
Date: Fri, 29 Jan 2010 13:05:12 +0530
Subject: [PATCH] gianfar: Modify the poll functions gfar_poll_tx and gfar_poll_rx

o. Modify the gfar_poll_tx and gfar_poll_rx to read tstat and rstat and
   then divide the budget based on number of queues active at that point
   and accordingly clean only those tx and rx rings.

o. Modify the way IMASK register was written to disable RX/TX when rx/tx
   interrupt occurs. We have to read the imask register, then do a bit-wise
   and operation with IMASK_RX/TX_DISABLED and then write back the imask value.

o. Also, get the group lock before re-enabling the RX/TX interrupts via
   IMASK register in the poll_tx/rx functions.

Signed-off-by: Sandeep Gopalpet <sandeep.kumar@freescale.com>
---
 drivers/net/gianfar.c |  115 +++++++++++++++++++++++++++---------------------
 drivers/net/gianfar.h |   21 ++++++---
 2 files changed, 79 insertions(+), 57 deletions(-)

diff --git a/drivers/net/gianfar.c b/drivers/net/gianfar.c
index ae73b08..61924d0 100644
--- a/drivers/net/gianfar.c
+++ b/drivers/net/gianfar.c
@@ -1523,7 +1523,7 @@ void gfar_configure_tx_coalescing(struct gfar_private *priv,
 {
 	struct gfar __iomem *regs = priv->gfargrp[0].regs;
 	u32 __iomem *baddr;
-	int i = 0;
+	int i = 0, mask = 0x1;
 
 	/* Backward compatible case ---- even if we enable
 	 * multiple queues, there's only single reg to program
@@ -1536,11 +1536,15 @@ void gfar_configure_tx_coalescing(struct gfar_private *priv,
 
 	if (priv->mode == MQ_MG_MODE) {
 		baddr = &regs->txic0;
-		for_each_bit (i, &tx_mask, priv->num_tx_queues) {
-			if (likely(priv->tx_queue[i]->txcoalescing)) {
-				gfar_write(baddr + i, 0);
-				gfar_write(baddr + i, priv->tx_queue[i]->txic);
+		for (i = 0; i < priv->num_tx_queues; i++) {
+			if (tx_mask & mask) {
+				if (likely(priv->tx_queue[i]->txcoalescing)) {
+					gfar_write(baddr + i, 0);
+					gfar_write(baddr + i,
+						 priv->tx_queue[i]->txic);
+				}
 			}
+			mask = mask << 0x1;
 		}
 	}
 }
@@ -1549,8 +1553,8 @@ void gfar_configure_rx_coalescing(struct gfar_private *priv,
 				unsigned long rx_mask)
 {
 	struct gfar __iomem *regs = priv->gfargrp[0].regs;
-	u32 *baddr;
-	int i = 0;
+	u32 __iomem *baddr;
+	int i = 0, mask = 0x1;
 
 	/* Backward compatible case ---- even if we enable
 	 * multiple queues, there's only single reg to program
@@ -1563,11 +1567,15 @@ void gfar_configure_rx_coalescing(struct gfar_private *priv,
 
 	if (priv->mode == MQ_MG_MODE) {
 		baddr = &regs->rxic0;
-		for_each_bit (i, &rx_mask, priv->num_rx_queues) {
-			if (likely(priv->rx_queue[i]->rxcoalescing)) {
-				gfar_write(baddr + i, 0);
-				gfar_write(baddr + i, priv->rx_queue[i]->rxic);
+		for (i = 0; i < priv->num_rx_queues; i++) {
+			if (rx_mask & mask) {
+				if (likely(priv->rx_queue[i]->rxcoalescing)) {
+					gfar_write(baddr + i, 0);
+					gfar_write(baddr + i,
+						priv->rx_queue[i]->rxic);
+				}
 			}
+			mask = mask << 0x1;
 		}
 	}
 }
@@ -2576,10 +2584,13 @@ static int gfar_clean_tx_ring(struct gfar_priv_tx_q *tx_queue)
 static void gfar_schedule_cleanup_rx(struct gfar_priv_grp *gfargrp)
 {
 	unsigned long flags;
+	u32 imask = 0;
 
 	spin_lock_irqsave(&gfargrp->grplock, flags);
 	if (napi_schedule_prep(&gfargrp->napi_rx)) {
-		gfar_write(&gfargrp->regs->imask, IMASK_RX_DISABLED);
+		imask = gfar_read(&gfargrp->regs->imask);
+		imask = imask & IMASK_RX_DISABLED;
+		gfar_write(&gfargrp->regs->imask, imask);
 		__napi_schedule(&gfargrp->napi_rx);
 	} else {
 		gfar_write(&gfargrp->regs->ievent, IEVENT_RX_MASK);
@@ -2590,10 +2601,13 @@ static void gfar_schedule_cleanup_rx(struct gfar_priv_grp *gfargrp)
 static void gfar_schedule_cleanup_tx(struct gfar_priv_grp *gfargrp)
 {
 	unsigned long flags;
+	u32 imask = 0;
 
 	spin_lock_irqsave(&gfargrp->grplock, flags);
 	if (napi_schedule_prep(&gfargrp->napi_tx)) {
-		gfar_write(&gfargrp->regs->imask, IMASK_TX_DISABLED);
+		imask = gfar_read(&gfargrp->regs->imask);
+		imask = imask & IMASK_TX_DISABLED;
+		gfar_write(&gfargrp->regs->imask, imask);
 		__napi_schedule(&gfargrp->napi_tx);
 	} else {
 		gfar_write(&gfargrp->regs->ievent, IEVENT_TX_MASK);
@@ -3042,24 +3056,26 @@ static int gfar_poll_tx(struct napi_struct *napi, int budget)
 	struct gfar_private *priv = gfargrp->priv;
 	struct gfar __iomem *regs = gfargrp->regs;
 	struct gfar_priv_tx_q *tx_queue = NULL;
-	int budget_per_queue = 0, tx_cleaned = 0, i = 0;
-	int left_over_budget = budget, serviced_queues = 0, num_queues = 0;
-	int tx_cleaned_per_queue = 0;
+	int budget_per_queue = 0, tx_cleaned = 0, i = 0, num_act_qs = 0;
+	int tx_cleaned_per_queue = 0, mask = TSTAT_TXF0_MASK;
 	unsigned long flags;
-	u32 imask;
+	u32 imask, tstat, tstat_local;
 
-	num_queues = gfargrp->num_tx_queues;
-	budget_per_queue = budget/num_queues;
+	tstat = gfar_read(&regs->tstat);
+	tstat = tstat & TSTAT_TXF_MASK_ALL;
+	tstat_local = tstat;
 
-	gfar_write(&regs->ievent, IEVENT_TX_MASK);
+	while (tstat_local) {
+		num_act_qs++;
+		tstat_local &= (tstat_local - 1);
+	}
 
-	while (num_queues && left_over_budget) {
-		budget_per_queue = left_over_budget/num_queues;
-		left_over_budget = 0;
+	budget_per_queue = budget/num_act_qs;
 
-		for_each_bit(i, &gfargrp->tx_bit_map, priv->num_tx_queues) {
-			if (test_bit(i, &serviced_queues))
-				continue;
+	gfar_write(&regs->ievent, IEVENT_TX_MASK);
+
+	for (i = 0; i < priv->num_tx_queues; i++) {
+		if (tstat & mask) {
 			tx_queue = priv->tx_queue[i];
 			if (spin_trylock_irqsave(&tx_queue->txlock, flags)) {
 				tx_cleaned_per_queue =
@@ -3069,20 +3085,17 @@ static int gfar_poll_tx(struct napi_struct *napi, int budget)
 							flags);
 			}
 			tx_cleaned += tx_cleaned_per_queue;
-			if (tx_cleaned_per_queue < budget_per_queue) {
-				left_over_budget = left_over_budget +
-					(budget_per_queue - tx_cleaned_per_queue);
-				set_bit(i, &serviced_queues);
-				num_queues--;
-			}
 		}
 	}
 
 	if (tx_cleaned < budget) {
 		napi_complete(napi);
+		spin_lock_irq(&gfargrp->grplock);
 		imask = gfar_read(&regs->imask);
 		imask |= IMASK_DEFAULT_TX;
+		gfar_write(&regs->ievent, IEVENT_TX_MASK);
 		gfar_write(&regs->imask, imask);
+		spin_unlock_irq(&gfargrp->grplock);
 		gfar_configure_tx_coalescing(priv, gfargrp->tx_bit_map);
 	}
 
@@ -3097,42 +3110,44 @@ static int gfar_poll_rx(struct napi_struct *napi, int budget)
 	struct gfar __iomem *regs = gfargrp->regs;
 	struct gfar_priv_rx_q *rx_queue = NULL;
 	int rx_cleaned = 0, budget_per_queue = 0, rx_cleaned_per_queue = 0;
-	int i, left_over_budget = budget, serviced_queues = 0, num_queues = 0;
-	u32 imask;
+	int num_act_qs = 0, mask = RSTAT_RXF0_MASK, i;
+	u32 imask, rstat, rstat_local, rstat_rhalt = 0;
 
-	num_queues = gfargrp->num_rx_queues;
-	budget_per_queue = budget/num_queues;
+	rstat = gfar_read(&regs->rstat);
+	rstat = rstat & RSTAT_RXF_ALL_MASK;
+	rstat_local = rstat;
+
+	while (rstat_local) {
+		num_act_qs++;
+		rstat_local &= (rstat_local - 1);
+	}
+
+	budget_per_queue = budget/num_act_qs;
 
 	gfar_write(&regs->ievent, IEVENT_RX_MASK);
 
-	while (num_queues && left_over_budget) {
-		budget_per_queue = left_over_budget/num_queues;
-		left_over_budget = 0;
-		for_each_bit(i, &gfargrp->rx_bit_map, priv->num_rx_queues) {
-			if (test_bit(i, &serviced_queues))
-				continue;
+	for (i = 0; i < priv->num_rx_queues; i++) {
+		if (rstat & mask) {
+			rstat_rhalt |= (RSTAT_CLEAR_RHALT >> i);
 			rx_queue = priv->rx_queue[i];
 			rx_cleaned_per_queue = gfar_clean_rx_ring(rx_queue,
 							budget_per_queue);
 			rx_cleaned += rx_cleaned_per_queue;
-			if(rx_cleaned_per_queue < budget_per_queue) {
-				left_over_budget = left_over_budget +
-					(budget_per_queue - rx_cleaned_per_queue);
-				set_bit(i, &serviced_queues);
-				num_queues--;
-			}
 		}
+		mask = mask >> 0x1;
 	}
 
 	if (rx_cleaned < budget) {
 		napi_complete(napi);
 
 		/* Clear the halt bit in RSTAT */
-		gfar_write(&regs->rstat, gfargrp->rstat);
-
+		spin_lock_irq(&gfargrp->grplock);
+		gfar_write(&regs->rstat, rstat_rhalt);
 		imask = gfar_read(&regs->imask);
 		imask |= IMASK_DEFAULT_RX;
+		gfar_write(&regs->ievent, IEVENT_RX_MASK);
 		gfar_write(&regs->imask, imask);
+		spin_unlock_irq(&gfargrp->grplock);
 
 		gfar_configure_rx_coalescing(priv, gfargrp->rx_bit_map);
 	}
diff --git a/drivers/net/gianfar.h b/drivers/net/gianfar.h
index 60c3b5e..e9a3b5c 100644
--- a/drivers/net/gianfar.h
+++ b/drivers/net/gianfar.h
@@ -93,8 +93,8 @@ extern const char gfar_driver_version[];
 
 /* These need to be powers of 2 for this driver */
 #ifdef CONFIG_GFAR_SKBUFF_RECYCLING
-#define DEFAULT_TX_RING_SIZE	128
-#define DEFAULT_RX_RING_SIZE	128
+#define DEFAULT_TX_RING_SIZE	64
+#define DEFAULT_RX_RING_SIZE	64
 #else
 #define DEFAULT_TX_RING_SIZE	256
 #define DEFAULT_RX_RING_SIZE	256
@@ -276,6 +276,9 @@ extern const char gfar_driver_version[];
 #define DMACTRL_GRS             0x00000010
 #define DMACTRL_GTS             0x00000008
 
+#define TSTAT_TXF_MASK_ALL	0x0000FF00
+#define TSTAT_TXF0_MASK		0x00008000
+
 #define TSTAT_CLEAR_THALT_ALL	0xFF000000
 #define TSTAT_CLEAR_THALT	0x80000000
 #define TSTAT_CLEAR_THALT0	0x80000000
@@ -335,6 +338,8 @@ extern const char gfar_driver_version[];
 
 
 #define RSTAT_CLEAR_RHALT       0x00800000
+#define RSTAT_RXF_ALL_MASK	0x000000FF
+#define RSTAT_RXF0_MASK		0x00000080
 
 #define TCTRL_IPCSEN		0x00004000
 #define TCTRL_TUCSEN		0x00002000
@@ -367,11 +372,13 @@ extern const char gfar_driver_version[];
 #define IEVENT_MAG		0x00000800
 #define IEVENT_GRSC		0x00000100
 #define IEVENT_RXF0		0x00000080
+#define IEVENT_FGPI		0x00000010
 #define IEVENT_FIR		0x00000008
 #define IEVENT_FIQ		0x00000004
 #define IEVENT_DPE		0x00000002
 #define IEVENT_PERR		0x00000001
-#define IEVENT_RX_MASK          (IEVENT_RXB0 | IEVENT_RXF0 | IEVENT_BSY)
+#define IEVENT_RX_MASK          (IEVENT_RXB0 | IEVENT_RXF0 | \
+					IEVENT_FGPI | IEVENT_BSY)
 #define IEVENT_TX_MASK          (IEVENT_TXB | IEVENT_TXF)
 #define IEVENT_RTX_MASK         (IEVENT_RX_MASK | IEVENT_TX_MASK)
 #define IEVENT_ERR_MASK         \
@@ -406,13 +413,13 @@ extern const char gfar_driver_version[];
 #define IMASK_DEFAULT  (IMASK_TXEEN | IMASK_TXFEN | IMASK_TXBEN | \
 		IMASK_RXFEN0 | IMASK_BSY | IMASK_EBERR | IMASK_BABR | \
 		IMASK_XFUN | IMASK_RXC | IMASK_BABT | IMASK_DPE \
-		| IMASK_PERR)
-#define IMASK_RTX_DISABLED ((~(IMASK_RXFEN0 | IMASK_TXFEN | IMASK_BSY)) \
-			   & IMASK_DEFAULT)
+		| IMASK_PERR | IMASK_RXB0)
+#define IMASK_RTX_DISABLED ((~(IMASK_RXFEN0 | IMASK_RXB0 | IMASK_BSY | \
+				IMASK_TXFEN)) & IMASK_DEFAULT)
 
 #ifdef CONFIG_GIANFAR_TXNAPI
 #define IMASK_DEFAULT_TX	(IMASK_TXFEN | IMASK_TXBEN)
-#define IMASK_DEFAULT_RX	(IMASK_RXFEN0 | IMASK_BSY)
+#define IMASK_DEFAULT_RX	(IMASK_RXFEN0 | IMASK_RXB0 | IMASK_BSY)
 #define IMASK_RX_DISABLED	((~IMASK_DEFAULT_RX) \
 				& IMASK_DEFAULT)
 #define IMASK_TX_DISABLED	((~IMASK_DEFAULT_TX) \
-- 
1.5.6.3

