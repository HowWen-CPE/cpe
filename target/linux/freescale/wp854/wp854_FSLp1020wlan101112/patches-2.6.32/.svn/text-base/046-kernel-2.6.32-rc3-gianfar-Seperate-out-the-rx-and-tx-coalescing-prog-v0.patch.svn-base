From da3f6173f731d0388c2234d013622253488ac4f6 Mon Sep 17 00:00:00 2001
From: Sandeep Gopalpet <sandeep.kumar@freescale.com>
Date: Wed, 11 Nov 2009 17:17:21 +0530
Subject: [PATCH] gianfar: Seperate out the rx and tx coalescing functions

Divide the gfar_configure_coalescing function into two
functions gfar_configure_rx_coalescing and gfar_configure_tx_coalescing
so that rx and tx coalescing can be programmed seperately.

Signed-off-by: Sandeep Gopalpet <sandeep.kumar@freescale.com>
---
 drivers/net/gianfar.c         |   33 ++++++++++++++++++++++++---------
 drivers/net/gianfar.h         |    6 ++++--
 drivers/net/gianfar_ethtool.c |    3 ++-
 3 files changed, 30 insertions(+), 12 deletions(-)

diff --git a/drivers/net/gianfar.c b/drivers/net/gianfar.c
index d3da433..317c7de 100644
--- a/drivers/net/gianfar.c
+++ b/drivers/net/gianfar.c
@@ -1473,8 +1473,8 @@ void gfar_start(struct net_device *dev)
 	dev->trans_start = jiffies;
 }
 
-void gfar_configure_coalescing(struct gfar_private *priv,
-	unsigned int tx_mask, unsigned int rx_mask)
+void gfar_configure_tx_coalescing(struct gfar_private *priv,
+				unsigned int tx_mask)
 {
 	struct gfar __iomem *regs = priv->gfargrp[0].regs;
 	u32 *baddr;
@@ -1487,10 +1487,6 @@ void gfar_configure_coalescing(struct gfar_private *priv,
 	if(likely(priv->tx_queue[0]->txcoalescing))
 		gfar_write(&regs->txic, priv->tx_queue[0]->txic);
 
-	gfar_write(&regs->rxic, 0);
-	if(unlikely(priv->rx_queue[0]->rxcoalescing))
-		gfar_write(&regs->rxic, priv->rx_queue[0]->rxic);
-
 	if (priv->mode == MQ_MG_MODE) {
 		baddr = &regs->txic0;
 		for_each_bit (i, &tx_mask, priv->num_tx_queues) {
@@ -1500,6 +1496,24 @@ void gfar_configure_coalescing(struct gfar_private *priv,
 			}
 		}
 
+	}
+}
+
+void gfar_configure_rx_coalescing(struct gfar_private *priv,
+				unsigned int rx_mask)
+{
+	struct gfar __iomem *regs = priv->gfargrp[0].regs;
+	u32 *baddr;
+	int i = 0;
+
+	/* Backward compatible case ---- even if we enable
+	 * multiple queues, there's only single reg to program
+	 */
+	gfar_write(&regs->rxic, 0);
+	if(unlikely(priv->rx_queue[0]->rxcoalescing))
+		gfar_write(&regs->rxic, priv->rx_queue[0]->rxic);
+
+	if (priv->mode == MQ_MG_MODE) {
 		baddr = &regs->rxic0;
 		for_each_bit (i, &rx_mask, priv->num_rx_queues) {
 			if (likely(priv->rx_queue[i]->rxcoalescing)) {
@@ -1778,7 +1792,8 @@ int startup_gfar(struct net_device *dev)
 
 	phy_start(priv->phydev);
 
-	gfar_configure_coalescing(priv, 0xFF, 0xFF);
+	gfar_configure_tx_coalescing(priv, 0xFF);
+	gfar_configure_rx_coalescing(priv, 0xFF);
 
 	if (priv->rx_csum_enable)
 		rctrl |= RCTRL_CHECKSUMMING;
@@ -2993,8 +3008,8 @@ static int gfar_poll(struct napi_struct *napi, int budget)
 
 		/* If we are coalescing interrupts, update the timer */
 		/* Otherwise, clear it */
-		gfar_configure_coalescing(priv,
-				gfargrp->rx_bit_map, gfargrp->tx_bit_map);
+		gfar_configure_rx_coalescing(priv, gfargrp->rx_bit_map);
+		gfar_configure_tx_coalescing(priv, gfargrp->tx_bit_map);
 	}
 
 	return rx_cleaned;
diff --git a/drivers/net/gianfar.h b/drivers/net/gianfar.h
index 8053366..24d5278 100644
--- a/drivers/net/gianfar.h
+++ b/drivers/net/gianfar.h
@@ -1300,8 +1300,10 @@ extern void gfar_ptp_store_rxstamp(struct net_device *dev, struct sk_buff *skb);
 extern int gfar_ioctl_1588(struct net_device *dev, struct ifreq *ifr, int cmd);
 extern void gfar_phy_test(struct mii_bus *bus, struct phy_device *phydev,
 		int enable, u32 regnum, u32 read);
-extern void gfar_configure_coalescing(struct gfar_private *priv,
-		unsigned int tx_mask, unsigned int rx_mask);
+extern void gfar_configure_tx_coalescing(struct gfar_private *priv,
+					unsigned int tx_mask);
+extern void gfar_configure_rx_coalescing(struct gfar_private *priv,
+					unsigned int rx_mask);
 void gfar_init_sysfs(struct net_device *dev);
 
 extern const struct ethtool_ops gfar_ethtool_ops;
diff --git a/drivers/net/gianfar_ethtool.c b/drivers/net/gianfar_ethtool.c
index ddf6451..31d6784 100644
--- a/drivers/net/gianfar_ethtool.c
+++ b/drivers/net/gianfar_ethtool.c
@@ -428,7 +428,8 @@ static int gfar_scoalesce(struct net_device *dev, struct ethtool_coalesce *cvals
 			gfar_usecs2ticks(priv, cvals->tx_coalesce_usecs));
 	}
 
-	gfar_configure_coalescing(priv, 0xFF, 0xFF);
+	gfar_configure_tx_coalescing(priv, 0xFF);
+	gfar_configure_rx_coalescing(priv, 0xFF);
 
 	return 0;
 }
-- 
1.5.2.2

