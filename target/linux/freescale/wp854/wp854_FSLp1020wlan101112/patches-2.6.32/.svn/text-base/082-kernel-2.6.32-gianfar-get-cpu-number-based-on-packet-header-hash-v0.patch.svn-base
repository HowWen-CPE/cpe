From 25f023857870f63ed41aed8d2fcede2855f4f704 Mon Sep 17 00:00:00 2001
From: Sandeep Gopalpet <sandeep.kumar@freescale.com>
Date: Tue, 2 Feb 2010 12:44:41 +0530
Subject: [PATCH] gianfar: get cpu number based on packet header hash

This function uses code for 'Receive Packet Steering" patch
of Tom Herbert <therbert@google.com>.

Signed-off-by: Tarun Garg <b10794@freescale.com>
---
 drivers/net/gianfar.c |   71 ++++++++++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 70 insertions(+), 1 deletions(-)

diff --git a/drivers/net/gianfar.c b/drivers/net/gianfar.c
index 4837fd2..919467e 100644
--- a/drivers/net/gianfar.c
+++ b/drivers/net/gianfar.c
@@ -10,7 +10,7 @@
  * Maintainer: Kumar Gala
  * Modifier: Sandeep Gopalpet <sandeep.kumar@freescale.com>
  *
- * Copyright 2002-2009 Freescale Semiconductor, Inc.
+ * Copyright 2002-2010 Freescale Semiconductor, Inc.
  * Copyright 2007 MontaVista Software, Inc.
  *
  * This program is free software; you can redistribute  it and/or modify it
@@ -681,6 +681,75 @@ static void gfar_init_filer_table(struct gfar_private *priv)
 	priv->gfargrp[0].regs->rir0 = DEFAULT_RIR0;
 }
 
+static int get_cpu_number(unsigned char *eth_pkt, int len)
+{
+	u32 addr1, addr2, ports;
+	struct ipv6hdr *ip6;
+	struct iphdr *ip;
+	u32 hash, ihl;
+	u8 ip_proto;
+	int cpu;
+	struct ethhdr *eth;
+	static u32 simple_hashrnd;
+	static int simple_hashrnd_initialized;
+
+	if (len < ETH_HLEN)
+		return -1;
+	else
+		eth = eth_pkt;
+
+	if (unlikely(!simple_hashrnd_initialized)) {
+		get_random_bytes(&simple_hashrnd, 4);
+		simple_hashrnd_initialized = 1;
+	}
+
+	switch (eth->h_proto) {
+	case __constant_htons(ETH_P_IP):
+		if (len < (ETH_HLEN + sizeof(*ip)))
+			return -1;
+
+		ip = (struct iphdr *) (eth_pkt + ETH_HLEN);
+		ip_proto = ip->protocol;
+		addr1 = ip->saddr;
+		addr2 = ip->daddr;
+		ihl = ip->ihl;
+		break;
+	case __constant_htons(ETH_P_IPV6):
+		if (len < (ETH_HLEN + sizeof(*ip6)))
+			return -1;
+
+		ip6 = (struct ipv6hdr *)(eth_pkt + ETH_HLEN);
+		ip_proto = ip6->nexthdr;
+		addr1 = ip6->saddr.s6_addr32[3];
+		addr2 = ip6->daddr.s6_addr32[3];
+		ihl = (40 >> 2);
+		break;
+	default:
+		return -1;
+	}
+	ports = 0;
+	switch (ip_proto) {
+	case IPPROTO_TCP:
+	case IPPROTO_UDP:
+	case IPPROTO_DCCP:
+	case IPPROTO_ESP:
+	case IPPROTO_AH:
+	case IPPROTO_SCTP:
+	case IPPROTO_UDPLITE:
+		if (len < (ETH_HLEN + (ihl * 4) + 4))
+			ports = *((u32 *) (eth_pkt + ETH_HLEN + (ihl * 4)));
+		break;
+
+	default:
+		break;
+	}
+
+	hash = jhash_3words(addr1, addr2, ports, simple_hashrnd);
+	cpu = hash & 0x1;
+
+	return cpu_online(cpu) ? cpu : -1;
+}
+
 /* Set up the ethernet device structure, private data,
  * and anything else we need before we start */
 static int gfar_probe(struct of_device *ofdev,
-- 
1.5.6.3

