From 10d51da3bb8dee937ee875b7fe36edaf19d62abf Mon Sep 17 00:00:00 2001
From: Sandeep Gopalpet <sandeep.kumar@freescale.com>
Date: Tue, 2 Mar 2010 22:06:42 +0530
Subject: [PATCH] gianfar: Changes to gfar_poll function.

1. Instead of looping around the queues and trying to reclaim
the budget in case there are no packets for other queues, we
check the status of the queues via RSTAT and TSTAT regs and then
divide the budget accordingly and then clean only those queues.

2. Modified the coalescing apis to use for_each_bit, because we
already modified the rx/tx-bit-maps according to for_each_bit
notations.

Signed-off-by: Sandeep Gopalpet <sandeep.kumar@freescale.com>
---
 drivers/net/gianfar.c |   94 ++++++++++++++++++++++++++----------------------
 1 files changed, 51 insertions(+), 43 deletions(-)

diff --git a/drivers/net/gianfar.c b/drivers/net/gianfar.c
index f252005..7fe3d73 100644
--- a/drivers/net/gianfar.c
+++ b/drivers/net/gianfar.c
@@ -2020,7 +2020,7 @@ void gfar_configure_tx_coalescing(struct gfar_private *priv,
 {
 	struct gfar __iomem *regs = priv->gfargrp[0].regs;
 	u32 __iomem *baddr;
-	int i = 0, mask = 0x1;
+	int i = 0;
 
 	/* Backward compatible case ---- even if we enable
 	 * multiple queues, there's only single reg to program
@@ -2033,15 +2033,11 @@ void gfar_configure_tx_coalescing(struct gfar_private *priv,
 
 	if (priv->mode == MQ_MG_MODE) {
 		baddr = &regs->txic0;
-		for (i = 0; i < priv->num_tx_queues; i++) {
-			if (tx_mask & mask) {
-				if (likely(priv->tx_queue[i]->txcoalescing)) {
-					gfar_write(baddr + i, 0);
-					gfar_write(baddr + i,
-						 priv->tx_queue[i]->txic);
-				}
+		for_each_bit(i, &tx_mask, priv->num_tx_queues) {
+			if (likely(priv->tx_queue[i]->txcoalescing)) {
+				gfar_write(baddr + i, 0);
+				gfar_write(baddr + i, priv->tx_queue[i]->txic);
 			}
-			mask = mask << 0x1;
 		}
 	}
 }
@@ -2051,7 +2047,7 @@ void gfar_configure_rx_coalescing(struct gfar_private *priv,
 {
 	struct gfar __iomem *regs = priv->gfargrp[0].regs;
 	u32 __iomem *baddr;
-	int i = 0, mask = 0x1;
+	int i = 0;
 
 	/* Backward compatible case ---- even if we enable
 	 * multiple queues, there's only single reg to program
@@ -2064,15 +2060,11 @@ void gfar_configure_rx_coalescing(struct gfar_private *priv,
 
 	if (priv->mode == MQ_MG_MODE) {
 		baddr = &regs->rxic0;
-		for (i = 0; i < priv->num_rx_queues; i++) {
-			if (rx_mask & mask) {
-				if (likely(priv->rx_queue[i]->rxcoalescing)) {
-					gfar_write(baddr + i, 0);
-					gfar_write(baddr + i,
-						priv->rx_queue[i]->rxic);
-				}
+		for_each_bit(i, &rx_mask, priv->num_rx_queues) {
+			if (likely(priv->rx_queue[i]->rxcoalescing)) {
+				gfar_write(baddr + i, 0);
+				gfar_write(baddr + i, priv->rx_queue[i]->rxic);
 			}
-			mask = mask << 0x1;
 		}
 	}
 }
@@ -3868,48 +3860,62 @@ static int gfar_poll(struct napi_struct *napi, int budget)
 	struct gfar_priv_tx_q *tx_queue = NULL;
 	struct gfar_priv_rx_q *rx_queue = NULL;
 	int rx_cleaned = 0, budget_per_queue = 0, rx_cleaned_per_queue = 0;
-	int tx_cleaned = 0, i, left_over_budget = budget;
-	unsigned long serviced_queues = 0, flags;
-	int num_queues = 0;
+	int tx_cleaned = 0, i;
+	int num_queues = 0, num_act_qs = 0;
+	unsigned long flags;
+	u32 tstat, tstat_thalt = 0, mask;
+	u32 rstat, rstat_local, rstat_rhalt = 0;
+
 
 	num_queues = gfargrp->num_rx_queues;
-	budget_per_queue = budget/num_queues;
+	tstat = gfar_read(&regs->tstat);
+	tstat = tstat & TSTAT_TXF_MASK_ALL;
 
-	/* Clear IEVENT, so interrupts aren't called again
-	 * because of the packets that have already arrived */
-	gfar_write(&regs->ievent, IEVENT_RTX_MASK);
+	rstat = gfar_read(&regs->rstat);
+	rstat = rstat & RSTAT_RXF_ALL_MASK;
+	rstat_local = rstat;
 
-	while (num_queues && left_over_budget) {
+	while (rstat_local) {
+		num_act_qs++;
+		rstat_local &= (rstat_local - 1);
+	}
 
-		budget_per_queue = left_over_budget/num_queues;
-		left_over_budget = 0;
+	if(num_act_qs)
+		budget_per_queue = budget/num_act_qs;
 
-		for_each_bit(i, &gfargrp->rx_bit_map, priv->num_rx_queues) {
-			if (test_bit(i, &serviced_queues))
-				continue;
-			rx_queue = priv->rx_queue[i];
-			tx_queue = priv->tx_queue[rx_queue->qindex];
+	/* Clear IEVENT, so interrupts aren't called again
+	 * because of the packets that have already arrived */
+	gfar_write(&regs->ievent, IEVENT_RTX_MASK);
 
-			/* If we fail to get the lock,
-			 * don't bother with the TX BDs */
+	mask = TSTAT_TXF0_MASK;
+	for (i = 0; i < priv->num_tx_queues; i++) {
+		if (tstat & mask) {
+			tx_queue = priv->tx_queue[i];
 			if (spin_trylock_irqsave(&tx_queue->txlock, flags)) {
+				tstat_thalt |= (TSTAT_CLEAR_THALT >> i);
 				tx_cleaned += gfar_clean_tx_ring(tx_queue);
 				spin_unlock_irqrestore(&tx_queue->txlock,
-							flags);
+								flags);
 			}
+		}
+		mask = mask >> 0x1;
+	}
 
+	mask =  RSTAT_RXF0_MASK;
+	for (i = 0; i < priv->num_rx_queues; i++) {
+		if (rstat & mask) {
+			rstat_rhalt |= (RSTAT_CLEAR_RHALT >> i);
+			rx_queue = priv->rx_queue[i];
 			rx_cleaned_per_queue = gfar_clean_rx_ring(rx_queue,
 							budget_per_queue);
 			rx_cleaned += rx_cleaned_per_queue;
-			if(rx_cleaned_per_queue < budget_per_queue) {
-				left_over_budget = left_over_budget +
-					(budget_per_queue - rx_cleaned_per_queue);
-				set_bit(i, &serviced_queues);
-				num_queues--;
-			}
 		}
+		mask = mask >> 0x1;
 	}
 
+	gfar_write(&regs->rstat, rstat_rhalt);
+	gfar_write(&regs->tstat, tstat_thalt);
+
 	if (tx_cleaned)
 		return budget;
 
@@ -3917,7 +3923,9 @@ static int gfar_poll(struct napi_struct *napi, int budget)
 		napi_complete(napi);
 
 		/* Clear the halt bit in RSTAT */
-		gfar_write(&regs->rstat, gfargrp->rstat);
+		gfar_write(&regs->rstat, rstat);
+
+		gfar_write(&regs->tstat, tstat);
 
 		gfar_write(&regs->imask, IMASK_DEFAULT);
 
-- 
1.5.6.3

